C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE AMUX_SEL
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\AMux_Sel.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\AMux_Sel.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\AMux_Sel.lst) CD DB NOIP OT
                    -(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\AMux_Sel.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: AMux_Sel.c  
   3          * Version 2.20
   4          *
   5          * Description:
   6          *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7          *  comparitors. Each instance of this user module is capable of generating
   8          *  two PWM outputs with the same period. The pulse width is selectable between
   9          *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks. 
  10          *  The compare value output may be configured to be active when the present 
  11          *  counter is less than or less than/equal to the compare value.
  12          *  A terminal count output is also provided. It generates a pulse one clock
  13          *  width wide when the counter is equal to zero.
  14          *
  15          * Note:
  16          *
  17          *******************************************************************************
  18          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  19          * You may use this file only in accordance with the license, terms, conditions, 
  20          * disclaimers, and limitations in the end user license agreement accompanying 
  21          * the software package with which this file was provided.
  22          ********************************************************************************/
  23          
  24          #include "cytypes.h"
  25          #include "AMux_Sel.h"
  26          
  27          uint8 AMux_Sel_initVar = 0u;
  28          
  29          
  30          /*******************************************************************************
  31          * Function Name: AMux_Sel_Start
  32          ********************************************************************************
  33          *
  34          * Summary:
  35          *  The start function initializes the pwm with the default values, the 
  36          *  enables the counter to begin counting.  It does not enable interrupts,
  37          *  the EnableInt command should be called if interrupt generation is required.
  38          *
  39          * Parameters:  
  40          *  void  
  41          *
  42          * Return: 
  43          *  void
  44          *
  45          * Global variables:
  46          *  AMux_Sel_initVar: Is modified when this function is called for the 
  47          *   first time. Is used to ensure that initialization happens only once.
  48          *
  49          *******************************************************************************/
  50          void AMux_Sel_Start(void) 
  51          {
  52   1          /* If not Initialized then initialize all required hardware and software */
  53   1          if(AMux_Sel_initVar == 0u)
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 2   

  54   1          {
  55   2              AMux_Sel_Init();
  56   2              AMux_Sel_initVar = 1u;
  57   2          }
  58   1          AMux_Sel_Enable();
  59   1      
  60   1      }
  61          
  62          
  63          /*******************************************************************************
  64          * Function Name: AMux_Sel_Init
  65          ********************************************************************************
  66          *
  67          * Summary:
  68          *  Initialize component's parameters to the parameters set by user in the 
  69          *  customizer of the component placed onto schematic. Usually called in 
  70          *  AMux_Sel_Start().
  71          *
  72          * Parameters:  
  73          *  void
  74          *
  75          * Return: 
  76          *  void
  77          *
  78          *******************************************************************************/
  79          void AMux_Sel_Init(void) 
  80          {
  81   1          #if (AMux_Sel_UsingFixedFunction || AMux_Sel_UseControl)
  82   1              uint8 ctrl;
  83   1          #endif /* (AMux_Sel_UsingFixedFunction || AMux_Sel_UseControl) */
  84   1          
  85   1          #if(!AMux_Sel_UsingFixedFunction) 
  86   1              #if(AMux_Sel_UseStatus)
                          /* Interrupt State Backup for Critical Region*/
                          uint8 AMux_Sel_interruptState;
                      #endif /* (AMux_Sel_UseStatus) */
  90   1          #endif /* (!AMux_Sel_UsingFixedFunction) */
  91   1          
  92   1          #if (AMux_Sel_UsingFixedFunction)
                      /* You are allowed to write the compare value (FF only) */
                      AMux_Sel_CONTROL |= AMux_Sel_CFG0_MODE;
                      #if (AMux_Sel_DeadBand2_4)
                          AMux_Sel_CONTROL |= AMux_Sel_CFG0_DB;
                      #endif /* (AMux_Sel_DeadBand2_4) */
                              
                      /* Set the default Compare Mode */
                      #if(CY_PSOC5A)
                              ctrl = AMux_Sel_CONTROL2 & ~AMux_Sel_CTRL_CMPMODE1_MASK;
                              AMux_Sel_CONTROL2 = ctrl | AMux_Sel_DEFAULT_COMPARE1_MODE;
                      #endif /* (CY_PSOC5A) */
                      #if(CY_PSOC3 || CY_PSOC5LP)
                              ctrl = AMux_Sel_CONTROL3 & ~AMux_Sel_CTRL_CMPMODE1_MASK;
                              AMux_Sel_CONTROL3 = ctrl | AMux_Sel_DEFAULT_COMPARE1_MODE;
                      #endif /* (CY_PSOC3 || CY_PSOC5LP) */
                      
                       /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
                      AMux_Sel_RT1 &= ~AMux_Sel_RT1_MASK;
                      AMux_Sel_RT1 |= AMux_Sel_SYNC;     
                              
                      /*Enable DSI Sync all all inputs of the PWM*/
                      AMux_Sel_RT1 &= ~(AMux_Sel_SYNCDSI_MASK);
                      AMux_Sel_RT1 |= AMux_Sel_SYNCDSI_EN;
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 3   

                     
                  #elif (AMux_Sel_UseControl)
 118   1              /* Set the default compare mode defined in the parameter */
 119   1              ctrl = AMux_Sel_CONTROL & ~AMux_Sel_CTRL_CMPMODE2_MASK & ~AMux_Sel_CTRL_CMPMODE1_MASK;
 120   1              AMux_Sel_CONTROL = ctrl | AMux_Sel_DEFAULT_COMPARE2_MODE | 
 121   1                                         AMux_Sel_DEFAULT_COMPARE1_MODE;
 122   1          #endif /* (AMux_Sel_UsingFixedFunction) */
 123   1              
 124   1          #if (!AMux_Sel_UsingFixedFunction)
 125   1              #if (AMux_Sel_Resolution == 8)
 126   1                  /* Set FIFO 0 to 1 byte register for period*/
 127   1                  AMux_Sel_AUX_CONTROLDP0 |= (AMux_Sel_AUX_CTRL_FIFO0_CLR);
 128   1              #else /* (AMux_Sel_Resolution == 16)*/
                          /* Set FIFO 0 to 1 byte register for period */
                          AMux_Sel_AUX_CONTROLDP0 |= (AMux_Sel_AUX_CTRL_FIFO0_CLR);
                          AMux_Sel_AUX_CONTROLDP1 |= (AMux_Sel_AUX_CTRL_FIFO0_CLR);
                      #endif /* (AMux_Sel_Resolution == 8) */
 133   1      
 134   1              AMux_Sel_WriteCounter(AMux_Sel_INIT_PERIOD_VALUE);
 135   1          #endif /* (!AMux_Sel_UsingFixedFunction) */
 136   1              
 137   1          AMux_Sel_WritePeriod(AMux_Sel_INIT_PERIOD_VALUE);
 138   1      
 139   1              #if (AMux_Sel_UseOneCompareMode)
                          AMux_Sel_WriteCompare(AMux_Sel_INIT_COMPARE_VALUE1);
                      #else
 142   1                  AMux_Sel_WriteCompare1(AMux_Sel_INIT_COMPARE_VALUE1);
 143   1                  AMux_Sel_WriteCompare2(AMux_Sel_INIT_COMPARE_VALUE2);
 144   1              #endif /* (AMux_Sel_UseOneCompareMode) */
 145   1              
 146   1              #if (AMux_Sel_KillModeMinTime)
                          AMux_Sel_WriteKillTime(AMux_Sel_MinimumKillTime);
                      #endif /* (AMux_Sel_KillModeMinTime) */
 149   1              
 150   1              #if (AMux_Sel_DeadBandUsed)
                          AMux_Sel_WriteDeadTime(AMux_Sel_INIT_DEAD_TIME);
                      #endif /* (AMux_Sel_DeadBandUsed) */
 153   1      
 154   1          #if (AMux_Sel_UseStatus || AMux_Sel_UsingFixedFunction)
                      AMux_Sel_SetInterruptMode(AMux_Sel_INIT_INTERRUPTS_MODE);
                  #endif /* (AMux_Sel_UseStatus || AMux_Sel_UsingFixedFunction) */
 157   1              
 158   1          #if (AMux_Sel_UsingFixedFunction)
                      /* Globally Enable the Fixed Function Block chosen */
                      AMux_Sel_GLOBAL_ENABLE |= AMux_Sel_BLOCK_EN_MASK;
                      /* Set the Interrupt source to come from the status register */
                      AMux_Sel_CONTROL2 |= AMux_Sel_CTRL2_IRQ_SEL;
                  #else
 164   1              #if(AMux_Sel_UseStatus)
                          
                          /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
                          /* Enter Critical Region*/
                          AMux_Sel_interruptState = CyEnterCriticalSection();
                          /* Use the interrupt output of the status register for IRQ output */
                          AMux_Sel_STATUS_AUX_CTRL |= AMux_Sel_STATUS_ACTL_INT_EN_MASK;
                          
                           /* Exit Critical Region*/
                          CyExitCriticalSection(AMux_Sel_interruptState);
                          
                          /* Clear the FIFO to enable the AMux_Sel_STATUS_FIFOFULL
                                 bit to be set on FIFO full. */
                          AMux_Sel_ClearFIFO();
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 4   

                      #endif /* (AMux_Sel_UseStatus) */
 179   1          #endif /* (AMux_Sel_UsingFixedFunction) */
 180   1      }
 181          
 182          
 183          /*******************************************************************************
 184          * Function Name: AMux_Sel_Enable
 185          ********************************************************************************
 186          *
 187          * Summary: 
 188          *  Enables the PWM block operation
 189          *
 190          * Parameters:  
 191          *  void
 192          *
 193          * Return: 
 194          *  void
 195          *
 196          * Side Effects: 
 197          *  This works only if software enable mode is chosen
 198          *
 199          *******************************************************************************/
 200          void AMux_Sel_Enable(void) 
 201          {
 202   1          /* Globally Enable the Fixed Function Block chosen */
 203   1          #if (AMux_Sel_UsingFixedFunction)
                      AMux_Sel_GLOBAL_ENABLE |= AMux_Sel_BLOCK_EN_MASK;
                      AMux_Sel_GLOBAL_STBY_ENABLE |= AMux_Sel_BLOCK_STBY_EN_MASK;
                  #endif /* (AMux_Sel_UsingFixedFunction) */
 207   1          
 208   1          /* Enable the PWM from the control register  */
 209   1          #if (AMux_Sel_UseControl || AMux_Sel_UsingFixedFunction)
 210   1              AMux_Sel_CONTROL |= AMux_Sel_CTRL_ENABLE;
 211   1          #endif /* (AMux_Sel_UseControl || AMux_Sel_UsingFixedFunction) */
 212   1      }
 213          
 214          
 215          /*******************************************************************************
 216          * Function Name: AMux_Sel_Stop
 217          ********************************************************************************
 218          *
 219          * Summary:
 220          *  The stop function halts the PWM, but does not change any modes or disable
 221          *  interrupts.
 222          *
 223          * Parameters:  
 224          *  void  
 225          *
 226          * Return: 
 227          *  void
 228          *
 229          * Side Effects:
 230          *  If the Enable mode is set to Hardware only then this function
 231          *  has no effect on the operation of the PWM
 232          *
 233          *******************************************************************************/
 234          void AMux_Sel_Stop(void) 
 235          {
 236   1          #if (AMux_Sel_UseControl || AMux_Sel_UsingFixedFunction)
 237   1              AMux_Sel_CONTROL &= ~AMux_Sel_CTRL_ENABLE;
 238   1          #endif /* (AMux_Sel_UseControl || AMux_Sel_UsingFixedFunction) */
 239   1          
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 5   

 240   1          /* Globally disable the Fixed Function Block chosen */
 241   1          #if (AMux_Sel_UsingFixedFunction)
                      AMux_Sel_GLOBAL_ENABLE &= ~AMux_Sel_BLOCK_EN_MASK;
                      AMux_Sel_GLOBAL_STBY_ENABLE &= ~AMux_Sel_BLOCK_STBY_EN_MASK;
                  #endif /* (AMux_Sel_UsingFixedFunction) */
 245   1      }
 246          
 247          
 248          #if (AMux_Sel_UseOneCompareMode)
              #if (AMux_Sel_CompareMode1SW)
              
              
              /*******************************************************************************
              * Function Name: AMux_Sel_SetCompareMode
              ********************************************************************************
              * 
              * Summary:
              *  This function writes the Compare Mode for the pwm output when in Dither mode,
              *  Center Align Mode or One Output Mode.
              *
              * Parameters:
              *  comparemode:  The new compare mode for the PWM output. Use the compare types
              *                defined in the H file as input arguments.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void AMux_Sel_SetCompareMode(uint8 comparemode) 
              {
                  #if(AMux_Sel_UsingFixedFunction)
                      #if(CY_PSOC5A)
                          uint8 comparemodemasked = (comparemode << AMux_Sel_CTRL_CMPMODE1_SHIFT);
                          AMux_Sel_CONTROL2 &= ~AMux_Sel_CTRL_CMPMODE1_MASK; /*Clear Existing Data */
                          AMux_Sel_CONTROL2 |= comparemodemasked;  
                      #endif /* (CY_PSOC5A) */
                              
                      #if(CY_PSOC3 || CY_PSOC5LP)
                          uint8 comparemodemasked = (comparemode << AMux_Sel_CTRL_CMPMODE1_SHIFT);
                          AMux_Sel_CONTROL3 &= ~AMux_Sel_CTRL_CMPMODE1_MASK; /*Clear Existing Data */
                          AMux_Sel_CONTROL3 |= comparemodemasked;     
                      #endif /* (CY_PSOC3 || CY_PSOC5LP) */
                              
                  #elif (AMux_Sel_UseControl)
                      uint8 comparemode1masked = (comparemode << AMux_Sel_CTRL_CMPMODE1_SHIFT) & 
                                                  AMux_Sel_CTRL_CMPMODE1_MASK;
                      uint8 comparemode2masked = (comparemode << AMux_Sel_CTRL_CMPMODE2_SHIFT) & 
                                                 AMux_Sel_CTRL_CMPMODE2_MASK;
                      /*Clear existing mode */
                      AMux_Sel_CONTROL &= ~(AMux_Sel_CTRL_CMPMODE1_MASK | AMux_Sel_CTRL_CMPMODE2_MASK); 
                      AMux_Sel_CONTROL |= (comparemode1masked | comparemode2masked);
                      
                  #else
                      uint8 temp = comparemode;
                  #endif /* (AMux_Sel_UsingFixedFunction) */
              }
              #endif /* AMux_Sel_CompareMode1SW */
              
              #else /* UseOneCompareMode */
 299          
 300          
 301          #if (AMux_Sel_CompareMode1SW)
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 6   

              
              
              /*******************************************************************************
              * Function Name: AMux_Sel_SetCompareMode1
              ********************************************************************************
              * 
              * Summary:
              *  This function writes the Compare Mode for the pwm or pwm1 output
              *
              * Parameters:  
              *  comparemode:  The new compare mode for the PWM output. Use the compare types
              *                defined in the H file as input arguments.
              *
              * Return: 
              *  void
              *
              *******************************************************************************/
              void AMux_Sel_SetCompareMode1(uint8 comparemode) 
              {
                  uint8 comparemodemasked = (comparemode << AMux_Sel_CTRL_CMPMODE1_SHIFT) & 
                                             AMux_Sel_CTRL_CMPMODE1_MASK;
                  #if(AMux_Sel_UsingFixedFunction)
                      #if(CY_PSOC5A)
                          AMux_Sel_CONTROL2 &= AMux_Sel_CTRL_CMPMODE1_MASK; /*Clear existing mode */
                          AMux_Sel_CONTROL2 |= comparemodemasked; 
                      #endif /* (CY_PSOC5A) */
                              
                      #if(CY_PSOC3 || CY_PSOC5LP)
                          AMux_Sel_CONTROL3 &= AMux_Sel_CTRL_CMPMODE1_MASK; /*Clear existing mode */
                          AMux_Sel_CONTROL3 |= comparemodemasked; 
                      #endif /* (CY_PSOC3 || CY_PSOC5LP) */
                              
                  #elif (AMux_Sel_UseControl)
                      AMux_Sel_CONTROL &= AMux_Sel_CTRL_CMPMODE1_MASK; /*Clear existing mode */
                      AMux_Sel_CONTROL |= comparemodemasked;
                  #endif    /* (AMux_Sel_UsingFixedFunction) */
              }
              #endif /* AMux_Sel_CompareMode1SW */
 340          
 341          
 342          #if (AMux_Sel_CompareMode2SW)
              
              
              /*******************************************************************************
              * Function Name: AMux_Sel_SetCompareMode2
              ********************************************************************************
              * 
              * Summary:
              *  This function writes the Compare Mode for the pwm or pwm2 output
              *
              * Parameters:  
              *  comparemode:  The new compare mode for the PWM output. Use the compare types
              *                defined in the H file as input arguments.
              *
              * Return: 
              *  void
              *
              *******************************************************************************/
              void AMux_Sel_SetCompareMode2(uint8 comparemode) 
              {
                  #if(AMux_Sel_UsingFixedFunction)
                      /* Do Nothing because there is no second Compare Mode Register in FF block */ 
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 7   

                  #elif (AMux_Sel_UseControl)
                      uint8 comparemodemasked = (comparemode << AMux_Sel_CTRL_CMPMODE2_SHIFT) & 
                                                           AMux_Sel_CTRL_CMPMODE2_MASK;
                      AMux_Sel_CONTROL &= AMux_Sel_CTRL_CMPMODE2_MASK; /*Clear existing mode */
                      AMux_Sel_CONTROL |= comparemodemasked;
                  #endif /* (AMux_Sel_UsingFixedFunction) */
              }
              #endif /*AMux_Sel_CompareMode2SW */
 372          #endif /* UseOneCompareMode */
 373          
 374          
 375          #if (!AMux_Sel_UsingFixedFunction)
 376          
 377          
 378          /*******************************************************************************
 379          * Function Name: AMux_Sel_WriteCounter
 380          ********************************************************************************
 381          * 
 382          * Summary:
 383          *  This function is used to change the counter value.
 384          *
 385          * Parameters:  
 386          *  counter:  This value may be between 1 and (2^Resolution)-1.   
 387          *
 388          * Return: 
 389          *  void
 390          *
 391          *******************************************************************************/
 392          void AMux_Sel_WriteCounter(uint8 counter) \
 393                                             
 394          {
 395   1          CY_SET_REG8(AMux_Sel_COUNTER_LSB_PTR, counter);
 396   1      }
 397          
 398          /*******************************************************************************
 399          * Function Name: AMux_Sel_ReadCounter
 400          ********************************************************************************
 401          * 
 402          * Summary:
 403          *  This function returns the current value of the counter.  It doesn't matter
 404          *  if the counter is enabled or running.
 405          *
 406          * Parameters:  
 407          *  void  
 408          *
 409          * Return: 
 410          *  The current value of the counter.
 411          *
 412          *******************************************************************************/
 413          uint8 AMux_Sel_ReadCounter(void) 
 414          {
 415   1          /* Force capture by reading Accumulator */
 416   1          /* Must first do a software capture to be able to read the counter */
 417   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 418   1          CY_GET_REG8(AMux_Sel_COUNTERCAP_LSB_PTR);
 419   1          
 420   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 421   1          return (CY_GET_REG8(AMux_Sel_CAPTURE_LSB_PTR));
 422   1      }
 423          
 424          
 425          #if (AMux_Sel_UseStatus)
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 8   

              
              
              /*******************************************************************************
              * Function Name: AMux_Sel_ClearFIFO
              ********************************************************************************
              * 
              * Summary:
              *  This function clears all capture data from the capture FIFO
              *
              * Parameters:  
              *  void
              *
              * Return: 
              *  void
              *
              *******************************************************************************/
              void AMux_Sel_ClearFIFO(void) 
              {
                  while(AMux_Sel_ReadStatusRegister() & AMux_Sel_STATUS_FIFONEMPTY)
                      AMux_Sel_ReadCapture();
              }
              #endif /* AMux_Sel_UseStatus */
 448          #endif /* !AMux_Sel_UsingFixedFunction */
 449          
 450          
 451          /*******************************************************************************
 452          * Function Name: AMux_Sel_WritePeriod
 453          ********************************************************************************
 454          * 
 455          * Summary:
 456          *  This function is used to change the period of the counter.  The new period 
 457          *  will be loaded the next time terminal count is detected.
 458          *
 459          * Parameters:  
 460          *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0 
 461          *           will result in the counter remaining at zero.
 462          *
 463          * Return: 
 464          *  void
 465          *
 466          *******************************************************************************/
 467          void AMux_Sel_WritePeriod(uint8 period) 
 468          {
 469   1          #if(AMux_Sel_UsingFixedFunction)
                      CY_SET_REG16(AMux_Sel_PERIOD_LSB_PTR, (uint16)period);
                  #else
 472   1              CY_SET_REG8(AMux_Sel_PERIOD_LSB_PTR, period);
 473   1          #endif /* (AMux_Sel_UsingFixedFunction) */
 474   1      }
 475          
 476          
 477          #if (AMux_Sel_UseOneCompareMode)
              
              
              /*******************************************************************************
              * Function Name: AMux_Sel_WriteCompare
              ********************************************************************************
              * 
              * Summary:
              *  This funtion is used to change the compare1 value when the PWM is in Dither
              *  mode. The compare output will reflect the new value on the next UDB clock. 
              *  The compare output will be driven high when the present counter value is 
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 9   

              *  compared to the compare value based on the compare mode defined in 
              *  Dither Mode.
              *
              * Parameters:  
              *  compare:  New compare value.  
              *
              * Return: 
              *  void
              *
              * Side Effects:
              *  This function is only available if the PWM mode parameter is set to
              *  Dither Mode, Center Aligned Mode or One Output Mode
              *
              *******************************************************************************/
              void AMux_Sel_WriteCompare(uint8 compare) \
                                                 
              {
                 CY_SET_REG8(AMux_Sel_COMPARE1_LSB_PTR, compare);
                 #if (AMux_Sel_PWMMode == AMux_Sel__B_PWM__DITHER)
                      CY_SET_REG8(AMux_Sel_COMPARE2_LSB_PTR, compare+1);
                 #endif /* (AMux_Sel_PWMMode == AMux_Sel__B_PWM__DITHER) */
              }
              
              
              #else
 513          
 514          
 515          /*******************************************************************************
 516          * Function Name: AMux_Sel_WriteCompare1
 517          ********************************************************************************
 518          * 
 519          * Summary:
 520          *  This funtion is used to change the compare1 value.  The compare output will 
 521          *  reflect the new value on the next UDB clock.  The compare output will be 
 522          *  driven high when the present counter value is less than or less than or 
 523          *  equal to the compare register, depending on the mode.
 524          *
 525          * Parameters:  
 526          *  compare:  New compare value.  
 527          *
 528          * Return: 
 529          *  void
 530          *
 531          *******************************************************************************/
 532          void AMux_Sel_WriteCompare1(uint8 compare) \
 533                                              
 534          {
 535   1          #if(AMux_Sel_UsingFixedFunction)
                      CY_SET_REG16(AMux_Sel_COMPARE1_LSB_PTR, (uint16)compare);
                  #else
 538   1              CY_SET_REG8(AMux_Sel_COMPARE1_LSB_PTR, compare);
 539   1          #endif /* (AMux_Sel_UsingFixedFunction) */
 540   1      }
 541          
 542          
 543          /*******************************************************************************
 544          * Function Name: AMux_Sel_WriteCompare2
 545          ********************************************************************************
 546          * 
 547          * Summary:
 548          *  This funtion is used to change the compare value, for compare1 output.  
 549          *  The compare output will reflect the new value on the next UDB clock.  
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 10  

 550          *  The compare output will be driven high when the present counter value is 
 551          *  less than or less than or equal to the compare register, depending on the 
 552          *  mode.
 553          *
 554          * Parameters:  
 555          *  compare:  New compare value.  
 556          *
 557          * Return: 
 558          *  void
 559          *
 560          *******************************************************************************/
 561          void AMux_Sel_WriteCompare2(uint8 compare) \
 562                                              
 563          {
 564   1          #if(AMux_Sel_UsingFixedFunction)
                      CY_SET_REG16(AMux_Sel_COMPARE2_LSB_PTR, compare);
                  #else
 567   1              CY_SET_REG8(AMux_Sel_COMPARE2_LSB_PTR, compare);
 568   1          #endif /* (AMux_Sel_UsingFixedFunction) */
 569   1      }
 570          #endif /* UseOneCompareMode */
 571          
 572          
 573          #if (AMux_Sel_DeadBandUsed)
              
              
              /*******************************************************************************
              * Function Name: AMux_Sel_WriteDeadTime
              ********************************************************************************
              * 
              * Summary:
              *  This function writes the dead-band counts to the corresponding register
              *
              * Parameters:  
              *  deadtime:  Number of counts for dead time 
              *
              * Return: 
              *  void
              *
              *******************************************************************************/
              void AMux_Sel_WriteDeadTime(uint8 deadtime) 
              {
                  /* If using the Dead Band 1-255 mode then just write the register */
                  #if(!AMux_Sel_DeadBand2_4)
                      CY_SET_REG8(AMux_Sel_DEADBAND_COUNT_PTR, deadtime);
                  #else
                      /* Otherwise the data has to be masked and offset */        
                      /* Clear existing data */
                      AMux_Sel_DEADBAND_COUNT &= ~AMux_Sel_DEADBAND_COUNT_MASK; 
                          /* Set new dead time */
                      AMux_Sel_DEADBAND_COUNT |= (deadtime << AMux_Sel_DEADBAND_COUNT_SHIFT) & 
                                                          AMux_Sel_DEADBAND_COUNT_MASK; 
                  #endif /* (!AMux_Sel_DeadBand2_4) */
              }
              
              
              /*******************************************************************************
              * Function Name: AMux_Sel_ReadDeadTime
              ********************************************************************************
              * 
              * Summary:
              *  This function reads the dead-band counts from the corresponding register
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 11  

              *
              * Parameters:  
              *  void
              *
              * Return: 
              *  Dead Band Counts
              *
              *******************************************************************************/
              uint8 AMux_Sel_ReadDeadTime(void) 
              {
                  /* If using the Dead Band 1-255 mode then just read the register */
                  #if(!AMux_Sel_DeadBand2_4)
                      return (CY_GET_REG8(AMux_Sel_DEADBAND_COUNT_PTR));
                  #else
                      /* Otherwise the data has to be masked and offset */
                      return ((AMux_Sel_DEADBAND_COUNT & AMux_Sel_DEADBAND_COUNT_MASK) >> 
                               AMux_Sel_DEADBAND_COUNT_SHIFT);
                  #endif /* (!AMux_Sel_DeadBand2_4) */
              }
              #endif /* DeadBandUsed */
 632          
 633          
 634          /* [] END OF FILE */
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION AMux_Sel_Start (BEGIN)
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
0000 900000      R     MOV     DPTR,#AMux_Sel_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0008 120000      R     LCALL   AMux_Sel_Init
                                           ; SOURCE LINE # 56
000B 900000      R     MOV     DPTR,#AMux_Sel_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0011         ?C0001:
                                           ; SOURCE LINE # 58
0011 120000      R     LCALL   AMux_Sel_Enable
                                           ; SOURCE LINE # 60
0014 22                RET     
             ; FUNCTION AMux_Sel_Start (END)

             ; FUNCTION AMux_Sel_Init (BEGIN)
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 119
0000 906479            MOV     DPTR,#06479H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54C0              ANL     A,#0C0H
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#ctrl
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
000E 900000      R     MOV     DPTR,#ctrl
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 4401              ORL     A,#01H
0016 FF                MOV     R7,A
0017 906479            MOV     DPTR,#06479H
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
001C 906599            MOV     DPTR,#06599H
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4401              ORL     A,#01H
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0027 7F09              MOV     R7,#09H
0029 120000      R     LCALL   _AMux_Sel_WriteCounter
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 13  

                                           ; SOURCE LINE # 137
002C 7F09              MOV     R7,#09H
002E 120000      R     LCALL   _AMux_Sel_WritePeriod
                                           ; SOURCE LINE # 142
0031 7F05              MOV     R7,#05H
0033 120000      R     LCALL   _AMux_Sel_WriteCompare1
                                           ; SOURCE LINE # 143
0036 7F04              MOV     R7,#04H
0038 120000      R     LCALL   _AMux_Sel_WriteCompare2
                                           ; SOURCE LINE # 180
003B 22                RET     
             ; FUNCTION AMux_Sel_Init (END)

             ; FUNCTION AMux_Sel_Enable (BEGIN)
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 210
0000 906479            MOV     DPTR,#06479H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4480              ORL     A,#080H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
000B 22                RET     
             ; FUNCTION AMux_Sel_Enable (END)

             ; FUNCTION AMux_Sel_Stop (BEGIN)
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 237
0000 906479            MOV     DPTR,#06479H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 547F              ANL     A,#07FH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
000B 22                RET     
             ; FUNCTION AMux_Sel_Stop (END)

             ; FUNCTION _AMux_Sel_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 392
0000 900000      R     MOV     DPTR,#counter
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
0005 900000      R     MOV     DPTR,#counter
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906509            MOV     DPTR,#06509H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
000F 22                RET     
             ; FUNCTION _AMux_Sel_WriteCounter (END)

C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 14  

             ; FUNCTION AMux_Sel_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 418
0000 906519            MOV     DPTR,#06519H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 421
0005 906559            MOV     DPTR,#06559H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 422
000A         ?C0007:
000A 22                RET     
             ; FUNCTION AMux_Sel_ReadCounter (END)

             ; FUNCTION _AMux_Sel_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 467
0000 900000      R     MOV     DPTR,#period
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 472
0005 900000      R     MOV     DPTR,#period
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906549            MOV     DPTR,#06549H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
000F 22                RET     
             ; FUNCTION _AMux_Sel_WritePeriod (END)

             ; FUNCTION _AMux_Sel_WriteCompare1 (BEGIN)
                                           ; SOURCE LINE # 532
0000 900000      R     MOV     DPTR,#compare
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 538
0005 900000      R     MOV     DPTR,#compare
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906529            MOV     DPTR,#06529H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 540
000F 22                RET     
             ; FUNCTION _AMux_Sel_WriteCompare1 (END)

             ; FUNCTION _AMux_Sel_WriteCompare2 (BEGIN)
                                           ; SOURCE LINE # 561
0000 900000      R     MOV     DPTR,#compare
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
                                           ; SOURCE LINE # 567
0005 900000      R     MOV     DPTR,#compare
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906539            MOV     DPTR,#06539H
000D EF                MOV     A,R7
C51 COMPILER V9.03   AMUX_SEL                                                              04/29/2016 14:40:25 PAGE 15  

000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
000F 22                RET     
             ; FUNCTION _AMux_Sel_WriteCompare2 (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    180    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
