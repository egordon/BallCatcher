C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE COUNTFALL
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\CountFall.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\CountFall.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\CountFall.lst) CD DB NOIP 
                    -OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\CountFall.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CountFall.c  
   3          * Version 2.20
   4          *
   5          *  Description:
   6          *     The Counter component consists of a 8, 16, 24 or 32-bit counter with
   7          *     a selectable period between 2 and 2^Width - 1.  
   8          *
   9          *   Note:
  10          *     None
  11          *
  12          *******************************************************************************
  13          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include "CountFall.h"
  20          
  21          uint8 CountFall_initVar = 0u;
  22          
  23          
  24          /*******************************************************************************
  25          * Function Name: CountFall_Init
  26          ********************************************************************************
  27          * Summary:
  28          *     Initialize to the schematic state
  29          * 
  30          * Parameters:  
  31          *  void  
  32          *
  33          * Return: 
  34          *  void
  35          *
  36          *******************************************************************************/
  37          void CountFall_Init(void) 
  38          {
  39   1              #if (!CountFall_UsingFixedFunction && !CountFall_ControlRegRemoved)
  40   1                  uint8 ctrl;
  41   1              #endif /* (!CountFall_UsingFixedFunction && !CountFall_ControlRegRemoved) */
  42   1              
  43   1              #if(!CountFall_UsingFixedFunction) 
  44   1                  /* Interrupt State Backup for Critical Region*/
  45   1                  uint8 CountFall_interruptState;
  46   1              #endif /* (!CountFall_UsingFixedFunction) */
  47   1              
  48   1              #if (CountFall_UsingFixedFunction)
                          /* Clear all bits but the enable bit (if it's already set for Timer operation */
                          CountFall_CONTROL &= CountFall_CTRL_ENABLE;
                          
                          /* Clear the mode bits for continuous run mode */
                          #if (CY_PSOC5A)
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 2   

                              CountFall_CONTROL2 &= ~CountFall_CTRL_MODE_MASK;
                          #endif /* (CY_PSOC5A) */
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              CountFall_CONTROL3 &= ~CountFall_CTRL_MODE_MASK;                
                          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
                          /* Check if One Shot mode is enabled i.e. RunMode !=0*/
                          #if (CountFall_RunModeUsed != 0x0u)
                              /* Set 3rd bit of Control register to enable one shot mode */
                              CountFall_CONTROL |= CountFall_ONESHOT;
                          #endif /* (CountFall_RunModeUsed != 0x0u) */
                          
                          /* Set the IRQ to use the status register interrupts */
                          CountFall_CONTROL2 |= CountFall_CTRL2_IRQ_SEL;
                          
                          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
                          CountFall_RT1 &= ~CountFall_RT1_MASK;
                          CountFall_RT1 |= CountFall_SYNC;     
                                  
                          /*Enable DSI Sync all all inputs of the Timer*/
                          CountFall_RT1 &= ~(CountFall_SYNCDSI_MASK);
                          CountFall_RT1 |= CountFall_SYNCDSI_EN;
              
                      #else
  77   1                  #if(!CountFall_ControlRegRemoved)
  78   1                  /* Set the default compare mode defined in the parameter */
  79   1                  ctrl = CountFall_CONTROL & ~CountFall_CTRL_CMPMODE_MASK;
  80   1                  CountFall_CONTROL = ctrl | CountFall_DEFAULT_COMPARE_MODE;
  81   1                  
  82   1                  /* Set the default capture mode defined in the parameter */
  83   1                  ctrl = CountFall_CONTROL & ~CountFall_CTRL_CAPMODE_MASK;
  84   1                  CountFall_CONTROL = ctrl | CountFall_DEFAULT_CAPTURE_MODE;
  85   1                  #endif /* (!CountFall_ControlRegRemoved) */
  86   1              #endif /* (CountFall_UsingFixedFunction) */
  87   1              
  88   1              /* Clear all data in the FIFO's */
  89   1              #if (!CountFall_UsingFixedFunction)
  90   1                  CountFall_ClearFIFO();
  91   1              #endif /* (!CountFall_UsingFixedFunction) */
  92   1              
  93   1              /* Set Initial values from Configuration */
  94   1              CountFall_WritePeriod(CountFall_INIT_PERIOD_VALUE);
  95   1              #if (!(CountFall_UsingFixedFunction && (CY_PSOC5A)))
  96   1                  CountFall_WriteCounter(CountFall_INIT_COUNTER_VALUE);
  97   1              #endif /* (!(CountFall_UsingFixedFunction && (CY_PSOC5A))) */
  98   1              CountFall_SetInterruptMode(CountFall_INIT_INTERRUPTS_MASK);
  99   1              
 100   1              #if (!CountFall_UsingFixedFunction)
 101   1                  /* Read the status register to clear the unwanted interrupts */
 102   1                  CountFall_ReadStatusRegister();
 103   1                  /* Set the compare value (only available to non-fixed function implementation */
 104   1                  CountFall_WriteCompare(CountFall_INIT_COMPARE_VALUE);
 105   1                  /* Use the interrupt output of the status register for IRQ output */
 106   1                  
 107   1                  /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
 108   1                  /* Enter Critical Region*/
 109   1                  CountFall_interruptState = CyEnterCriticalSection();
 110   1                  
 111   1                  CountFall_STATUS_AUX_CTRL |= CountFall_STATUS_ACTL_INT_EN_MASK;
 112   1                  
 113   1                  /* Exit Critical Region*/
 114   1                  CyExitCriticalSection(CountFall_interruptState);
 115   1                  
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 3   

 116   1              #endif /* (!CountFall_UsingFixedFunction) */
 117   1      }
 118          
 119          
 120          /*******************************************************************************
 121          * Function Name: CountFall_Enable
 122          ********************************************************************************
 123          * Summary:
 124          *     Enable the Counter
 125          * 
 126          * Parameters:  
 127          *  void  
 128          *
 129          * Return: 
 130          *  void
 131          *
 132          * Side Effects: 
 133          *   If the Enable mode is set to Hardware only then this function has no effect 
 134          *   on the operation of the counter.
 135          *
 136          *******************************************************************************/
 137          void CountFall_Enable(void) 
 138          {
 139   1          /* Globally Enable the Fixed Function Block chosen */
 140   1          #if (CountFall_UsingFixedFunction)
                      CountFall_GLOBAL_ENABLE |= CountFall_BLOCK_EN_MASK;
                      CountFall_GLOBAL_STBY_ENABLE |= CountFall_BLOCK_STBY_EN_MASK;
                  #endif /* (CountFall_UsingFixedFunction) */  
 144   1              
 145   1          /* Enable the counter from the control register  */
 146   1          /* If Fixed Function then make sure Mode is set correctly */
 147   1          /* else make sure reset is clear */
 148   1          #if(!CountFall_ControlRegRemoved || CountFall_UsingFixedFunction)
 149   1              CountFall_CONTROL |= CountFall_CTRL_ENABLE;                
 150   1          #endif /* (!CountFall_ControlRegRemoved || CountFall_UsingFixedFunction) */
 151   1          
 152   1      }
 153          
 154          
 155          /*******************************************************************************
 156          * Function Name: CountFall_Start
 157          ********************************************************************************
 158          * Summary:
 159          *  Enables the counter for operation 
 160          *
 161          * Parameters:  
 162          *  void  
 163          *
 164          * Return: 
 165          *  void
 166          *
 167          * Global variables:
 168          *  CountFall_initVar: Is modified when this function is called for the  
 169          *   first time. Is used to ensure that initialization happens only once.
 170          *
 171          *******************************************************************************/
 172          void CountFall_Start(void) 
 173          {
 174   1          if(CountFall_initVar == 0u)
 175   1          {
 176   2              CountFall_Init();
 177   2              
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 4   

 178   2              CountFall_initVar = 1u; /* Clear this bit for Initialization */        
 179   2          }
 180   1          
 181   1          /* Enable the Counter */
 182   1          CountFall_Enable();        
 183   1      }
 184          
 185          
 186          /*******************************************************************************
 187          * Function Name: CountFall_Stop
 188          ********************************************************************************
 189          * Summary:
 190          * Halts the counter, but does not change any modes or disable interrupts.
 191          *
 192          * Parameters:  
 193          *  void  
 194          *
 195          * Return: 
 196          *  void
 197          *
 198          * Side Effects: If the Enable mode is set to Hardware only then this function
 199          *               has no effect on the operation of the counter.
 200          *
 201          *******************************************************************************/
 202          void CountFall_Stop(void) 
 203          {
 204   1          /* Disable Counter */
 205   1          #if(!CountFall_ControlRegRemoved || CountFall_UsingFixedFunction)
 206   1              CountFall_CONTROL &= ~CountFall_CTRL_ENABLE;        
 207   1          #endif /* (!CountFall_ControlRegRemoved || CountFall_UsingFixedFunction) */
 208   1          
 209   1          /* Globally disable the Fixed Function Block chosen */
 210   1          #if (CountFall_UsingFixedFunction)
                      CountFall_GLOBAL_ENABLE &= ~CountFall_BLOCK_EN_MASK;
                      CountFall_GLOBAL_STBY_ENABLE &= ~CountFall_BLOCK_STBY_EN_MASK;
                  #endif /* (CountFall_UsingFixedFunction) */
 214   1      }
 215          
 216          
 217          /*******************************************************************************
 218          * Function Name: CountFall_SetInterruptMode
 219          ********************************************************************************
 220          * Summary:
 221          * Configures which interrupt sources are enabled to generate the final interrupt
 222          *
 223          * Parameters:  
 224          *  InterruptsMask: This parameter is an or'd collection of the status bits
 225          *                   which will be allowed to generate the counters interrupt.   
 226          *
 227          * Return: 
 228          *  void
 229          *
 230          *******************************************************************************/
 231          void CountFall_SetInterruptMode(uint8 interruptsMask) 
 232          {
 233   1          CountFall_STATUS_MASK = interruptsMask;
 234   1      }
 235          
 236          
 237          /*******************************************************************************
 238          * Function Name: CountFall_ReadStatusRegister
 239          ********************************************************************************
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 5   

 240          * Summary:
 241          *   Reads the status register and returns it's state. This function should use
 242          *       defined types for the bit-field information as the bits in this
 243          *       register may be permuteable.
 244          *
 245          * Parameters:  
 246          *  void
 247          *
 248          * Return: 
 249          *  (uint8) The contents of the status register
 250          *
 251          * Side Effects:
 252          *   Status register bits may be clear on read. 
 253          *
 254          *******************************************************************************/
 255          uint8   CountFall_ReadStatusRegister(void) 
 256          {
 257   1          return CountFall_STATUS;
 258   1      }
 259          
 260          
 261          #if(!CountFall_ControlRegRemoved)
 262          /*******************************************************************************
 263          * Function Name: CountFall_ReadControlRegister
 264          ********************************************************************************
 265          * Summary:
 266          *   Reads the control register and returns it's state. This function should use
 267          *       defined types for the bit-field information as the bits in this
 268          *       register may be permuteable.
 269          *
 270          * Parameters:  
 271          *  void
 272          *
 273          * Return: 
 274          *  (uint8) The contents of the control register
 275          *
 276          *******************************************************************************/
 277          uint8   CountFall_ReadControlRegister(void) 
 278          {
 279   1          return CountFall_CONTROL;
 280   1      }
 281          
 282          
 283          /*******************************************************************************
 284          * Function Name: CountFall_WriteControlRegister
 285          ********************************************************************************
 286          * Summary:
 287          *   Sets the bit-field of the control register.  This function should use
 288          *       defined types for the bit-field information as the bits in this
 289          *       register may be permuteable.
 290          *
 291          * Parameters:  
 292          *  void
 293          *
 294          * Return: 
 295          *  (uint8) The contents of the control register
 296          *
 297          *******************************************************************************/
 298          void    CountFall_WriteControlRegister(uint8 control) 
 299          {
 300   1          CountFall_CONTROL = control;
 301   1      }
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 6   

 302          
 303          #endif  /* (!CountFall_ControlRegRemoved) */
 304          
 305          
 306          #if (!(CountFall_UsingFixedFunction && (CY_PSOC5A)))
 307          /*******************************************************************************
 308          * Function Name: CountFall_WriteCounter
 309          ********************************************************************************
 310          * Summary:
 311          *   This funtion is used to set the counter to a specific value
 312          *
 313          * Parameters:  
 314          *  counter:  New counter value. 
 315          *
 316          * Return: 
 317          *  void 
 318          *
 319          *******************************************************************************/
 320          void CountFall_WriteCounter(uint16 counter) \
 321                                             
 322          {
 323   1          #if(CountFall_UsingFixedFunction)
                      /* assert if block is already enabled */
                      CYASSERT (!(CountFall_GLOBAL_ENABLE & CountFall_BLOCK_EN_MASK));
                      /* If block is disabled, enable it and then write the counter */
                      CountFall_GLOBAL_ENABLE |= CountFall_BLOCK_EN_MASK;
                      CY_SET_REG16(CountFall_COUNTER_LSB_PTR, (uint16)counter);
                      CountFall_GLOBAL_ENABLE &= ~CountFall_BLOCK_EN_MASK;
                  #else
 331   1              CY_SET_REG16(CountFall_COUNTER_LSB_PTR, counter);
 332   1          #endif /* (CountFall_UsingFixedFunction) */
 333   1      }
 334          #endif /* (!(CountFall_UsingFixedFunction && (CY_PSOC5A))) */
 335          
 336          
 337          /*******************************************************************************
 338          * Function Name: CountFall_ReadCounter
 339          ********************************************************************************
 340          * Summary:
 341          * Returns the current value of the counter.  It doesn't matter
 342          * if the counter is enabled or running.
 343          *
 344          * Parameters:  
 345          *  void:  
 346          *
 347          * Return: 
 348          *  (uint16) The present value of the counter.
 349          *
 350          *******************************************************************************/
 351          uint16 CountFall_ReadCounter(void) 
 352          {
 353   1          /* Force capture by reading Accumulator */
 354   1          /* Must first do a software capture to be able to read the counter */
 355   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 356   1          CY_GET_REG8(CountFall_COUNTER_LSB_PTR);
 357   1          
 358   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 359   1          return (CY_GET_REG16(CountFall_STATICCOUNT_LSB_PTR));
 360   1      }
 361          
 362          
 363          /*******************************************************************************
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 7   

 364          * Function Name: CountFall_ReadCapture
 365          ********************************************************************************
 366          * Summary:
 367          *   This function returns the last value captured.
 368          *
 369          * Parameters:  
 370          *  void
 371          *
 372          * Return: 
 373          *  (uint16) Present Capture value.
 374          *
 375          *******************************************************************************/
 376          uint16 CountFall_ReadCapture(void) 
 377          {
 378   1         return ( CY_GET_REG16(CountFall_STATICCOUNT_LSB_PTR) );  
 379   1      }
 380          
 381          
 382          /*******************************************************************************
 383          * Function Name: CountFall_WritePeriod
 384          ********************************************************************************
 385          * Summary:
 386          * Changes the period of the counter.  The new period 
 387          * will be loaded the next time terminal count is detected.
 388          *
 389          * Parameters:  
 390          *  period: (uint16) A value of 0 will result in
 391          *         the counter remaining at zero.  
 392          *
 393          * Return: 
 394          *  void
 395          *
 396          *******************************************************************************/
 397          void CountFall_WritePeriod(uint16 period) 
 398          {
 399   1          #if(CountFall_UsingFixedFunction)
                      CY_SET_REG16(CountFall_PERIOD_LSB_PTR,(uint16)period);
                  #else
 402   1              CY_SET_REG16(CountFall_PERIOD_LSB_PTR,period);
 403   1          #endif /* (CountFall_UsingFixedFunction) */
 404   1      }
 405          
 406          
 407          /*******************************************************************************
 408          * Function Name: CountFall_ReadPeriod
 409          ********************************************************************************
 410          * Summary:
 411          * Reads the current period value without affecting counter operation.
 412          *
 413          * Parameters:  
 414          *  void:  
 415          *
 416          * Return: 
 417          *  (uint16) Present period value.
 418          *
 419          *******************************************************************************/
 420          uint16 CountFall_ReadPeriod(void) 
 421          {
 422   1         return ( CY_GET_REG16(CountFall_PERIOD_LSB_PTR));
 423   1      }
 424          
 425          
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 8   

 426          #if (!CountFall_UsingFixedFunction)
 427          /*******************************************************************************
 428          * Function Name: CountFall_WriteCompare
 429          ********************************************************************************
 430          * Summary:
 431          * Changes the compare value.  The compare output will 
 432          * reflect the new value on the next UDB clock.  The compare output will be 
 433          * driven high when the present counter value compares true based on the 
 434          * configured compare mode setting. 
 435          *
 436          * Parameters:  
 437          *  Compare:  New compare value. 
 438          *
 439          * Return: 
 440          *  void
 441          *
 442          *******************************************************************************/
 443          void CountFall_WriteCompare(uint16 compare) \
 444                                             
 445          {
 446   1          #if(CountFall_UsingFixedFunction)
                      CY_SET_REG16(CountFall_COMPARE_LSB_PTR,(uint16)compare);
                  #else
 449   1              CY_SET_REG16(CountFall_COMPARE_LSB_PTR,compare);
 450   1          #endif /* (CountFall_UsingFixedFunction) */
 451   1      }
 452          
 453          
 454          /*******************************************************************************
 455          * Function Name: CountFall_ReadCompare
 456          ********************************************************************************
 457          * Summary:
 458          * Returns the compare value.
 459          *
 460          * Parameters:  
 461          *  void:
 462          *
 463          * Return: 
 464          *  (uint16) Present compare value.
 465          *
 466          *******************************************************************************/
 467          uint16 CountFall_ReadCompare(void) 
 468          {
 469   1         return ( CY_GET_REG16(CountFall_COMPARE_LSB_PTR));
 470   1      }
 471          
 472          
 473          #if (CountFall_COMPARE_MODE_SOFTWARE)
 474          /*******************************************************************************
 475          * Function Name: CountFall_SetCompareMode
 476          ********************************************************************************
 477          * Summary:
 478          *  Sets the software controlled Compare Mode.
 479          *
 480          * Parameters:
 481          *  compareMode:  Compare Mode Enumerated Type.
 482          *
 483          * Return:
 484          *  void
 485          *
 486          *******************************************************************************/
 487          void CountFall_SetCompareMode(uint8 compareMode) 
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 9   

 488          {
 489   1          /* Clear the compare mode bits in the control register */
 490   1          CountFall_CONTROL &= ~CountFall_CTRL_CMPMODE_MASK;
 491   1          
 492   1          /* Write the new setting */
 493   1          CountFall_CONTROL |= (compareMode << CountFall_CTRL_CMPMODE0_SHIFT);
 494   1      }
 495          #endif  /* (CountFall_COMPARE_MODE_SOFTWARE) */
 496          
 497          
 498          #if (CountFall_CAPTURE_MODE_SOFTWARE)
              /*******************************************************************************
              * Function Name: CountFall_SetCaptureMode
              ********************************************************************************
              * Summary:
              *  Sets the software controlled Capture Mode.
              *
              * Parameters:
              *  captureMode:  Capture Mode Enumerated Type.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void CountFall_SetCaptureMode(uint8 captureMode) 
              {
                  /* Clear the capture mode bits in the control register */
                  CountFall_CONTROL &= ~CountFall_CTRL_CAPMODE_MASK;
                  
                  /* Write the new setting */
                  CountFall_CONTROL |= (captureMode << CountFall_CTRL_CAPMODE0_SHIFT);
              }
              #endif  /* (CountFall_CAPTURE_MODE_SOFTWARE) */
 521          
 522          
 523          /*******************************************************************************
 524          * Function Name: CountFall_ClearFIFO
 525          ********************************************************************************
 526          * Summary:
 527          *   This function clears all capture data from the capture FIFO
 528          *
 529          * Parameters:  
 530          *  void:
 531          *
 532          * Return: 
 533          *  None
 534          *
 535          *******************************************************************************/
 536          void CountFall_ClearFIFO(void) 
 537          {
 538   1      
 539   1          while(CountFall_ReadStatusRegister() & CountFall_STATUS_FIFONEMP)
 540   1          {
 541   2              CountFall_ReadCapture();
 542   2          }
 543   1      
 544   1      }
 545          #endif  /* (!CountFall_UsingFixedFunction) */
 546          
 547          
 548          /* [] END OF FILE */
 549          
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CountFall_Init (BEGIN)
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 79
0000 906478            MOV     DPTR,#06478H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54F8              ANL     A,#0F8H
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#ctrl
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
000E 900000      R     MOV     DPTR,#ctrl
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 4405              ORL     A,#05H
0016 FF                MOV     R7,A
0017 906478            MOV     DPTR,#06478H
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
001C 906478            MOV     DPTR,#06478H
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 54E7              ANL     A,#0E7H
0024 FF                MOV     R7,A
0025 900000      R     MOV     DPTR,#ctrl
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
002A 900000      R     MOV     DPTR,#ctrl
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 4410              ORL     A,#010H
0032 FF                MOV     R7,A
0033 906478            MOV     DPTR,#06478H
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
0038 120000      R     LCALL   CountFall_ClearFIFO
                                           ; SOURCE LINE # 94
003B 7FB8              MOV     R7,#0B8H
003D 7E0B              MOV     R6,#0BH
003F 120000      R     LCALL   _CountFall_WritePeriod
                                           ; SOURCE LINE # 96
0042 7F00              MOV     R7,#00H
0044 7E00              MOV     R6,#00H
0046 120000      R     LCALL   _CountFall_WriteCounter
                                           ; SOURCE LINE # 98
0049 7F10              MOV     R7,#010H
004B 120000      R     LCALL   _CountFall_SetInterruptMode
                                           ; SOURCE LINE # 102
004E 120000      R     LCALL   CountFall_ReadStatusRegister
                                           ; SOURCE LINE # 104
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 11  

0051 7F02              MOV     R7,#02H
0053 7E00              MOV     R6,#00H
0055 120000      R     LCALL   _CountFall_WriteCompare
                                           ; SOURCE LINE # 109
0058 120000      E     LCALL   CyEnterCriticalSection
005B 900000      R     MOV     DPTR,#CountFall_interruptState
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0060 906499            MOV     DPTR,#06499H
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 4410              ORL     A,#010H
0068 FF                MOV     R7,A
0069 EF                MOV     A,R7
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
006B 900000      R     MOV     DPTR,#CountFall_interruptState
006E E0                MOVX    A,@DPTR
006F FF                MOV     R7,A
0070 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 117
0073 22                RET     
             ; FUNCTION CountFall_Init (END)

             ; FUNCTION CountFall_Enable (BEGIN)
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 149
0000 906478            MOV     DPTR,#06478H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4480              ORL     A,#080H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
000B 22                RET     
             ; FUNCTION CountFall_Enable (END)

             ; FUNCTION CountFall_Start (BEGIN)
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
0000 900000      R     MOV     DPTR,#CountFall_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
0008 120000      R     LCALL   CountFall_Init
                                           ; SOURCE LINE # 178
000B 900000      R     MOV     DPTR,#CountFall_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0011         ?C0003:
                                           ; SOURCE LINE # 182
0011 120000      R     LCALL   CountFall_Enable
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 12  

                                           ; SOURCE LINE # 183
0014 22                RET     
             ; FUNCTION CountFall_Start (END)

             ; FUNCTION CountFall_Stop (BEGIN)
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 206
0000 906478            MOV     DPTR,#06478H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 547F              ANL     A,#07FH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
000B 22                RET     
             ; FUNCTION CountFall_Stop (END)

             ; FUNCTION _CountFall_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 231
0000 900000      R     MOV     DPTR,#interruptsMask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
0005 900000      R     MOV     DPTR,#interruptsMask
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906489            MOV     DPTR,#06489H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
000F 22                RET     
             ; FUNCTION _CountFall_SetInterruptMode (END)

             ; FUNCTION CountFall_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0000 906469            MOV     DPTR,#06469H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 258
0005         ?C0007:
0005 22                RET     
             ; FUNCTION CountFall_ReadStatusRegister (END)

             ; FUNCTION CountFall_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
0000 906478            MOV     DPTR,#06478H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 280
0005         ?C0008:
0005 22                RET     
             ; FUNCTION CountFall_ReadControlRegister (END)

             ; FUNCTION _CountFall_WriteControlRegister (BEGIN)
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 13  

                                           ; SOURCE LINE # 298
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906478            MOV     DPTR,#06478H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
000F 22                RET     
             ; FUNCTION _CountFall_WriteControlRegister (END)

             ; FUNCTION _CountFall_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 320
0000 900000      R     MOV     DPTR,#counter
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 331
0008 7B02              MOV     R3,#02H
000A 7A65              MOV     R2,#065H
000C 7908              MOV     R1,#08H
000E 900000      R     MOV     DPTR,#counter
0011 E0                MOVX    A,@DPTR
0012 FC                MOV     R4,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FD                MOV     R5,A
0016 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 333
0019 22                RET     
             ; FUNCTION _CountFall_WriteCounter (END)

             ; FUNCTION CountFall_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 356
0000 906508            MOV     DPTR,#06508H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 359
0005 7B02              MOV     R3,#02H
0007 7A65              MOV     R2,#065H
0009 7948              MOV     R1,#048H
000B 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 360
000E         ?C0011:
000E 22                RET     
             ; FUNCTION CountFall_ReadCounter (END)

             ; FUNCTION CountFall_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
0000 7B02              MOV     R3,#02H
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 14  

0002 7A65              MOV     R2,#065H
0004 7948              MOV     R1,#048H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 379
0009         ?C0012:
0009 22                RET     
             ; FUNCTION CountFall_ReadCapture (END)

             ; FUNCTION _CountFall_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 397
0000 900000      R     MOV     DPTR,#period
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 402
0008 7B02              MOV     R3,#02H
000A 7A65              MOV     R2,#065H
000C 7928              MOV     R1,#028H
000E 900000      R     MOV     DPTR,#period
0011 E0                MOVX    A,@DPTR
0012 FC                MOV     R4,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FD                MOV     R5,A
0016 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 404
0019 22                RET     
             ; FUNCTION _CountFall_WritePeriod (END)

             ; FUNCTION CountFall_ReadPeriod (BEGIN)
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
0000 7B02              MOV     R3,#02H
0002 7A65              MOV     R2,#065H
0004 7928              MOV     R1,#028H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 423
0009         ?C0014:
0009 22                RET     
             ; FUNCTION CountFall_ReadPeriod (END)

             ; FUNCTION _CountFall_WriteCompare (BEGIN)
                                           ; SOURCE LINE # 443
0000 900000      R     MOV     DPTR,#compare
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 449
0008 7B02              MOV     R3,#02H
000A 7A65              MOV     R2,#065H
000C 7938              MOV     R1,#038H
000E 900000      R     MOV     DPTR,#compare
0011 E0                MOVX    A,@DPTR
0012 FC                MOV     R4,A
0013 A3                INC     DPTR
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 15  

0014 E0                MOVX    A,@DPTR
0015 FD                MOV     R5,A
0016 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 451
0019 22                RET     
             ; FUNCTION _CountFall_WriteCompare (END)

             ; FUNCTION CountFall_ReadCompare (BEGIN)
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
0000 7B02              MOV     R3,#02H
0002 7A65              MOV     R2,#065H
0004 7938              MOV     R1,#038H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 470
0009         ?C0016:
0009 22                RET     
             ; FUNCTION CountFall_ReadCompare (END)

             ; FUNCTION _CountFall_SetCompareMode (BEGIN)
                                           ; SOURCE LINE # 487
0000 900000      R     MOV     DPTR,#compareMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 490
0005 906478            MOV     DPTR,#06478H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54F8              ANL     A,#0F8H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
0010 906478            MOV     DPTR,#06478H
0013 C083              PUSH    DPH
0015 C082              PUSH    DPL
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#compareMode
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E EF                MOV     A,R7
001F 4E                ORL     A,R6
0020 FF                MOV     R7,A
0021 D082              POP     DPL
0023 D083              POP     DPH
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
0027 22                RET     
             ; FUNCTION _CountFall_SetCompareMode (END)

             ; FUNCTION CountFall_ClearFIFO (BEGIN)
                                           ; SOURCE LINE # 536
                                           ; SOURCE LINE # 537
0000         ?C0018:
                                           ; SOURCE LINE # 539
0000 120000      R     LCALL   CountFall_ReadStatusRegister
0003 7E00              MOV     R6,#00H
C51 COMPILER V9.03   COUNTFALL                                                             04/21/2016 16:33:15 PAGE 16  

0005 EF                MOV     A,R7
0006 30E605            JNB     ACC.6,?C0020
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
0009 120000      R     LCALL   CountFall_ReadCapture
                                           ; SOURCE LINE # 542
000C 80F2              SJMP    ?C0018
                                           ; SOURCE LINE # 544
000E         ?C0020:
000E 22                RET     
             ; FUNCTION CountFall_ClearFIFO (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    383    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
