C51 COMPILER V9.03   DETECTION_STATUS                                                      04/29/2016 14:40:29 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE DETECTION_STATUS
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\Detection_Status.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\Detection_Status.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\Detection_Status.ls
                    -t) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\Detection_Status.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Detection_Status.c  
   3          * Version 1.70
   4          *
   5          * Description:
   6          *  This file contains API to enable firmware to read the value of a Status 
   7          *  Register.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "Detection_Status.h"
  19          
  20          #if !defined(Detection_Status_sts_sts_reg__REMOVED) /* Check for removal by optimization */
  21          
  22          
  23          /*******************************************************************************
  24          * Function Name: Detection_Status_Read
  25          ********************************************************************************
  26          *
  27          * Summary:
  28          *  Reads the current value assigned to the Status Register.
  29          *
  30          * Parameters:
  31          *  None.
  32          *
  33          * Return:
  34          *  The current value in the Status Register.
  35          *
  36          *******************************************************************************/
  37          uint8 Detection_Status_Read(void) 
  38          { 
  39   1          return Detection_Status_Status;
  40   1      }
  41          
  42          
  43          /*******************************************************************************
  44          * Function Name: Detection_Status_InterruptEnable
  45          ********************************************************************************
  46          *
  47          * Summary:
  48          *  Enables the Status Register interrupt.
  49          *
  50          * Parameters:
  51          *  None.
  52          *
  53          * Return:
C51 COMPILER V9.03   DETECTION_STATUS                                                      04/29/2016 14:40:29 PAGE 2   

  54          *  None.
  55          *
  56          *******************************************************************************/
  57          void Detection_Status_InterruptEnable(void) 
  58          {
  59   1          uint8 interruptState;
  60   1          interruptState = CyEnterCriticalSection();
  61   1          Detection_Status_Status_Aux_Ctrl |= Detection_Status_STATUS_INTR_ENBL;
  62   1          CyExitCriticalSection(interruptState);
  63   1      }
  64          
  65          
  66          /*******************************************************************************
  67          * Function Name: Detection_Status_InterruptDisable
  68          ********************************************************************************
  69          *
  70          * Summary:
  71          *  Disables the Status Register interrupt.
  72          *
  73          * Parameters:
  74          *  None.
  75          *
  76          * Return:
  77          *  None.
  78          *
  79          *******************************************************************************/
  80          void Detection_Status_InterruptDisable(void) 
  81          {
  82   1          uint8 interruptState;
  83   1          interruptState = CyEnterCriticalSection();
  84   1          Detection_Status_Status_Aux_Ctrl &= ~Detection_Status_STATUS_INTR_ENBL;
  85   1          CyExitCriticalSection(interruptState);
  86   1      }
  87          
  88          
  89          /*******************************************************************************
  90          * Function Name: Detection_Status_WriteMask
  91          ********************************************************************************
  92          *
  93          * Summary:
  94          *  Writes the current mask value assigned to the Status Register.
  95          *
  96          * Parameters:
  97          *  mask:  Value to write into the mask register.
  98          *
  99          * Return:
 100          *  None.
 101          *
 102          *******************************************************************************/
 103          void Detection_Status_WriteMask(uint8 mask) 
 104          {
 105   1          mask &= (1 << Detection_Status_INPUTS)-1;
 106   1          Detection_Status_Status_Mask = mask;
 107   1      }
 108          
 109          
 110          /*******************************************************************************
 111          * Function Name: Detection_Status_ReadMask
 112          ********************************************************************************
 113          *
 114          * Summary:
 115          *  Reads the current interrupt mask assigned to the Status Register.
C51 COMPILER V9.03   DETECTION_STATUS                                                      04/29/2016 14:40:29 PAGE 3   

 116          *
 117          * Parameters:
 118          *  None.
 119          *
 120          * Return:
 121          *  The value of the interrupt mask of the Status Register.
 122          *
 123          *******************************************************************************/
 124          uint8 Detection_Status_ReadMask(void) 
 125          {
 126   1          return Detection_Status_Status_Mask;
 127   1      }
 128          
 129          #endif /* End check for removal by optimization */
 130          
 131          
 132          /* [] END OF FILE */
C51 COMPILER V9.03   DETECTION_STATUS                                                      04/29/2016 14:40:29 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Detection_Status_Read (BEGIN)
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
0000 90656A            MOV     DPTR,#0656AH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 40
0005         ?C0001:
0005 22                RET     
             ; FUNCTION Detection_Status_Read (END)

             ; FUNCTION Detection_Status_InterruptEnable (BEGIN)
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 60
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
0008 90659A            MOV     DPTR,#0659AH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4410              ORL     A,#010H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
0013 900000      R     MOV     DPTR,#interruptState
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 63
001B 22                RET     
             ; FUNCTION Detection_Status_InterruptEnable (END)

             ; FUNCTION Detection_Status_InterruptDisable (BEGIN)
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 83
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
0008 90659A            MOV     DPTR,#0659AH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54EF              ANL     A,#0EFH
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
0013 900000      R     MOV     DPTR,#interruptState
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
C51 COMPILER V9.03   DETECTION_STATUS                                                      04/29/2016 14:40:29 PAGE 5   

0018 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 86
001B 22                RET     
             ; FUNCTION Detection_Status_InterruptDisable (END)

             ; FUNCTION _Detection_Status_WriteMask (BEGIN)
                                           ; SOURCE LINE # 103
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
0005 900000      R     MOV     DPTR,#mask
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5401              ANL     A,#01H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#mask
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0013 900000      R     MOV     DPTR,#mask
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 90658A            MOV     DPTR,#0658AH
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
001D 22                RET     
             ; FUNCTION _Detection_Status_WriteMask (END)

             ; FUNCTION Detection_Status_ReadMask (BEGIN)
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
0000 90658A            MOV     DPTR,#0658AH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 127
0005         ?C0005:
0005 22                RET     
             ; FUNCTION Detection_Status_ReadMask (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     98    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
