C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE PIXY_UART
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\Pixy_UART.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\Pixy_UART.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\Pixy_UART.lst) CD DB NOIP 
                    -OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\Pixy_UART.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Pixy_UART.c
   3          * Version 2.20
   4          *
   5          * Description:
   6          *  This file provides all API functionality of the UART component
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "Pixy_UART.h"
  18          #include "CyLib.h"
  19          
  20          
  21          /***************************************
  22          * Global data allocation
  23          ***************************************/
  24          
  25          #if( Pixy_UART_TX_ENABLED && (Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH))
                  volatile uint8 Pixy_UART_txBuffer[Pixy_UART_TXBUFFERSIZE];
                  volatile uint8 Pixy_UART_txBufferRead = 0u;
                  uint8 Pixy_UART_txBufferWrite = 0u;
              #endif /* End Pixy_UART_TX_ENABLED */
  30          #if( ( Pixy_UART_RX_ENABLED || Pixy_UART_HD_ENABLED ) && \
  31               (Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH) )
                  volatile uint8 Pixy_UART_rxBuffer[Pixy_UART_RXBUFFERSIZE];
                  volatile uint8 Pixy_UART_rxBufferRead = 0u;
                  volatile uint8 Pixy_UART_rxBufferWrite = 0u;
                  volatile uint8 Pixy_UART_rxBufferLoopDetect = 0u;
                  volatile uint8 Pixy_UART_rxBufferOverflow = 0u;
                  #if (Pixy_UART_RXHW_ADDRESS_ENABLED)
                      volatile uint8 Pixy_UART_rxAddressMode = Pixy_UART_RXADDRESSMODE;
                      volatile uint8 Pixy_UART_rxAddressDetected = 0u;
                  #endif /* End EnableHWAddress */    
              #endif /* End Pixy_UART_RX_ENABLED */
  42          
  43          
  44          /***************************************
  45          * Local data allocation
  46          ***************************************/
  47          
  48          uint8 Pixy_UART_initVar = 0u;
  49          
  50          
  51          /*******************************************************************************
  52          * Function Name: Pixy_UART_Start
  53          ********************************************************************************
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 2   

  54          *
  55          * Summary:
  56          *  Initialize and Enable the UART component.
  57          *  Enable the clock input to enable operation.
  58          *
  59          * Parameters:
  60          *  None.
  61          *
  62          * Return:
  63          *  None.
  64          *
  65          * Global variables:
  66          *  The Pixy_UART_intiVar variable is used to indicate initial 
  67          *  configuration of this component. The variable is initialized to zero (0u) 
  68          *  and set to one (1u) the first time UART_Start() is called. This allows for 
  69          *  component initialization without re-initialization in all subsequent calls 
  70          *  to the Pixy_UART_Start() routine. 
  71          *
  72          * Reentrant:
  73          *  No.
  74          *
  75          *******************************************************************************/
  76          void Pixy_UART_Start(void) 
  77          {
  78   1          /* If not Initialized then initialize all required hardware and software */
  79   1          if(Pixy_UART_initVar == 0u)
  80   1          {
  81   2              Pixy_UART_Init();
  82   2              Pixy_UART_initVar = 1u;
  83   2          }
  84   1          Pixy_UART_Enable();
  85   1      }
  86          
  87          
  88          /*******************************************************************************
  89          * Function Name: Pixy_UART_Init
  90          ********************************************************************************
  91          *
  92          * Summary:
  93          *  Initialize component's parameters to the parameters set by user in the
  94          *  customizer of the component placed onto schematic. Usually called in
  95          *  Pixy_UART_Start().
  96          *
  97          * Parameters:
  98          *  None.
  99          *
 100          * Return:
 101          *  None.
 102          *
 103          *******************************************************************************/
 104          void Pixy_UART_Init(void) 
 105          {
 106   1          #if(Pixy_UART_RX_ENABLED || Pixy_UART_HD_ENABLED)
 107   1      
 108   1              #if(Pixy_UART_RX_INTERRUPT_ENABLED && (Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH))
                          /* Set the RX Interrupt. */
                          CyIntSetVector(Pixy_UART_RX_VECT_NUM,   Pixy_UART_RXISR);
                          CyIntSetPriority(Pixy_UART_RX_VECT_NUM, Pixy_UART_RX_PRIOR_NUM);
                      #endif /* End Pixy_UART_RX_INTERRUPT_ENABLED */
 113   1      
 114   1              #if (Pixy_UART_RXHW_ADDRESS_ENABLED)
                          Pixy_UART_SetRxAddressMode(Pixy_UART_RXAddressMode);
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 3   

                          Pixy_UART_SetRxAddress1(Pixy_UART_RXHWADDRESS1);
                          Pixy_UART_SetRxAddress2(Pixy_UART_RXHWADDRESS2);
                      #endif /* End Pixy_UART_RXHW_ADDRESS_ENABLED */
 119   1      
 120   1              /* Configure the Initial RX interrupt mask */
 121   1              Pixy_UART_RXSTATUS_MASK_REG  = Pixy_UART_INIT_RX_INTERRUPTS_MASK;
 122   1          #endif /* End Pixy_UART_RX_ENABLED || Pixy_UART_HD_ENABLED*/
 123   1      
 124   1          #if(Pixy_UART_TX_ENABLED)
                      #if(Pixy_UART_TX_INTERRUPT_ENABLED && (Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH))
                          /* Set the TX Interrupt. */
                          CyIntSetVector(Pixy_UART_TX_VECT_NUM,   Pixy_UART_TXISR);
                          CyIntSetPriority(Pixy_UART_TX_VECT_NUM, Pixy_UART_TX_PRIOR_NUM);
                      #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED */
              
                      /* Write Counter Value for TX Bit Clk Generator*/
                      #if(Pixy_UART_TXCLKGEN_DP)
                          Pixy_UART_TXBITCLKGEN_CTR_REG = Pixy_UART_BIT_CENTER;
                          Pixy_UART_TXBITCLKTX_COMPLETE_REG = (Pixy_UART_NUMBER_OF_DATA_BITS + \
                                                                  Pixy_UART_NUMBER_OF_START_BIT) * \
                                                                  Pixy_UART_OVER_SAMPLE_COUNT;
                      #else
                          Pixy_UART_TXBITCTR_COUNTER_REG = (Pixy_UART_NUMBER_OF_DATA_BITS + \
                                                                  Pixy_UART_NUMBER_OF_START_BIT) * \
                                                                  Pixy_UART_OVER_SAMPLE_8;
                      #endif /* End Pixy_UART_TXCLKGEN_DP */
              
                      /* Configure the Initial TX interrupt mask */
                      #if(Pixy_UART_TX_INTERRUPT_ENABLED && (Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH))
                          Pixy_UART_TXSTATUS_MASK_REG = Pixy_UART_TX_STS_FIFO_EMPTY;
                      #else
                          Pixy_UART_TXSTATUS_MASK_REG = Pixy_UART_INIT_TX_INTERRUPTS_MASK;
                      #endif /*End Pixy_UART_TX_INTERRUPT_ENABLED*/
                      
                  #endif /* End Pixy_UART_TX_ENABLED */
 151   1      
 152   1          #if(Pixy_UART_PARITY_TYPE_SW)  /* Write Parity to Control Register */
                      Pixy_UART_WriteControlRegister( \
                          (Pixy_UART_ReadControlRegister() & ~Pixy_UART_CTRL_PARITY_TYPE_MASK) | \
                          (Pixy_UART_PARITY_TYPE << Pixy_UART_CTRL_PARITY_TYPE0_SHIFT) );
                  #endif /* End Pixy_UART_PARITY_TYPE_SW */
 157   1      }
 158          
 159          
 160          /*******************************************************************************
 161          * Function Name: Pixy_UART_Enable
 162          ********************************************************************************
 163          *
 164          * Summary:
 165          *  Enables the UART block operation
 166          *
 167          * Parameters:
 168          *  None.
 169          *
 170          * Return:
 171          *  None.
 172          *
 173          * Global Variables:
 174          *  Pixy_UART_rxAddressDetected - set to initial state (0).
 175          *
 176          *******************************************************************************/
 177          void Pixy_UART_Enable(void) 
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 4   

 178          {
 179   1          uint8 enableInterrupts;
 180   1          enableInterrupts = CyEnterCriticalSection();
 181   1          
 182   1          #if(Pixy_UART_RX_ENABLED || Pixy_UART_HD_ENABLED)
 183   1              /*RX Counter (Count7) Enable */
 184   1              Pixy_UART_RXBITCTR_CONTROL_REG |= Pixy_UART_CNTR_ENABLE;
 185   1              /* Enable the RX Interrupt. */
 186   1              Pixy_UART_RXSTATUS_ACTL_REG  |= Pixy_UART_INT_ENABLE;
 187   1              #if(Pixy_UART_RX_INTERRUPT_ENABLED && (Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH))
                          CyIntEnable(Pixy_UART_RX_VECT_NUM);
                          #if (Pixy_UART_RXHW_ADDRESS_ENABLED)
                              Pixy_UART_rxAddressDetected = 0u;
                          #endif /* End Pixy_UART_RXHW_ADDRESS_ENABLED */
                      #endif /* End Pixy_UART_RX_INTERRUPT_ENABLED */
 193   1          #endif /* End Pixy_UART_RX_ENABLED || Pixy_UART_HD_ENABLED*/
 194   1      
 195   1          #if(Pixy_UART_TX_ENABLED)
                      /*TX Counter (DP/Count7) Enable */
                      #if(!Pixy_UART_TXCLKGEN_DP)
                          Pixy_UART_TXBITCTR_CONTROL_REG |= Pixy_UART_CNTR_ENABLE;
                      #endif /* End Pixy_UART_TXCLKGEN_DP */
                      /* Enable the TX Interrupt. */
                      Pixy_UART_TXSTATUS_ACTL_REG |= Pixy_UART_INT_ENABLE;
                      #if(Pixy_UART_TX_INTERRUPT_ENABLED && (Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH))
                          CyIntEnable(Pixy_UART_TX_VECT_NUM);
                      #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED*/
                   #endif /* End Pixy_UART_TX_ENABLED */
 206   1      
 207   1          #if(Pixy_UART_INTERNAL_CLOCK_USED)
 208   1              /* Set the bit to enable the clock. */
 209   1              Pixy_UART_INTCLOCK_CLKEN_REG |= Pixy_UART_INTCLOCK_CLKEN_MASK;
 210   1          #endif /* End Pixy_UART_INTERNAL_CLOCK_USED */
 211   1          
 212   1          CyExitCriticalSection(enableInterrupts);
 213   1      }
 214          
 215          
 216          /*******************************************************************************
 217          * Function Name: Pixy_UART_Stop
 218          ********************************************************************************
 219          *
 220          * Summary:
 221          *  Disable the UART component
 222          *
 223          * Parameters:
 224          *  None.
 225          *
 226          * Return:
 227          *  None.
 228          *
 229          *******************************************************************************/
 230          void Pixy_UART_Stop(void) 
 231          {
 232   1          uint8 enableInterrupts;
 233   1          enableInterrupts = CyEnterCriticalSection();
 234   1      
 235   1          /*Write Bit Counter Disable */
 236   1          #if(Pixy_UART_RX_ENABLED || Pixy_UART_HD_ENABLED)
 237   1              Pixy_UART_RXBITCTR_CONTROL_REG &= ~Pixy_UART_CNTR_ENABLE;
 238   1          #endif /* End Pixy_UART_RX_ENABLED */
 239   1      
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 5   

 240   1          #if(Pixy_UART_TX_ENABLED)
                      #if(!Pixy_UART_TXCLKGEN_DP)
                          Pixy_UART_TXBITCTR_CONTROL_REG &= ~Pixy_UART_CNTR_ENABLE;
                      #endif /* End Pixy_UART_TXCLKGEN_DP */
                  #endif /* Pixy_UART_TX_ENABLED */
 245   1      
 246   1          #if(Pixy_UART_INTERNAL_CLOCK_USED)
 247   1              /* Clear the bit to enable the clock. */
 248   1              Pixy_UART_INTCLOCK_CLKEN_REG &= ~Pixy_UART_INTCLOCK_CLKEN_MASK;
 249   1          #endif /* End Pixy_UART_INTERNAL_CLOCK_USED */
 250   1          
 251   1          /*Disable internal interrupt component*/
 252   1          #if(Pixy_UART_RX_ENABLED || Pixy_UART_HD_ENABLED)
 253   1              Pixy_UART_RXSTATUS_ACTL_REG  &= ~Pixy_UART_INT_ENABLE;
 254   1              #if(Pixy_UART_RX_INTERRUPT_ENABLED && (Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH))
                          Pixy_UART_DisableRxInt();
                      #endif /* End Pixy_UART_RX_INTERRUPT_ENABLED */
 257   1          #endif /* End Pixy_UART_RX_ENABLED */
 258   1          
 259   1          #if(Pixy_UART_TX_ENABLED)
                      Pixy_UART_TXSTATUS_ACTL_REG &= ~Pixy_UART_INT_ENABLE;
                      #if(Pixy_UART_TX_INTERRUPT_ENABLED && (Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH))
                          Pixy_UART_DisableTxInt();
                      #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED */
                  #endif /* End Pixy_UART_TX_ENABLED */
 265   1      
 266   1          CyExitCriticalSection(enableInterrupts);
 267   1      }
 268          
 269          
 270          /*******************************************************************************
 271          * Function Name: Pixy_UART_ReadControlRegister
 272          ********************************************************************************
 273          *
 274          * Summary:
 275          *  Read the current state of the control register
 276          *
 277          * Parameters:
 278          *  None.
 279          *
 280          * Return:
 281          *  Current state of the control register.
 282          *
 283          *******************************************************************************/
 284          uint8 Pixy_UART_ReadControlRegister(void) 
 285          {
 286   1          #if( Pixy_UART_CONTROL_REG_REMOVED )
 287   1              return(0u);
 288   1          #else
                      return(Pixy_UART_CONTROL_REG);
                  #endif /* End Pixy_UART_CONTROL_REG_REMOVED */
 291   1      }
 292          
 293          
 294          /*******************************************************************************
 295          * Function Name: Pixy_UART_WriteControlRegister
 296          ********************************************************************************
 297          *
 298          * Summary:
 299          *  Writes an 8-bit value into the control register
 300          *
 301          * Parameters:
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 6   

 302          *  control:  control register value
 303          *
 304          * Return:
 305          *  None.
 306          *
 307          *******************************************************************************/
 308          void  Pixy_UART_WriteControlRegister(uint8 control) 
 309          {
 310   1          #if( Pixy_UART_CONTROL_REG_REMOVED )
 311   1              control = control;      /* Reassigning to release compiler warning */ 
 312   1          #else
                     Pixy_UART_CONTROL_REG = control;
                  #endif /* End Pixy_UART_CONTROL_REG_REMOVED */
 315   1      }
 316          
 317          
 318          #if(Pixy_UART_RX_ENABLED || Pixy_UART_HD_ENABLED)
 319          
 320              #if(Pixy_UART_RX_INTERRUPT_ENABLED)
              
                      /*******************************************************************************
                      * Function Name: Pixy_UART_EnableRxInt
                      ********************************************************************************
                      *
                      * Summary:
                      *  Enable RX interrupt generation
                      *
                      * Parameters:
                      *  None.
                      *
                      * Return:
                      *  None.
                      *
                      * Theory:
                      *  Enable the interrupt output -or- the interrupt component itself
                      *
                      *******************************************************************************/
                      void Pixy_UART_EnableRxInt(void) 
                      {
                          CyIntEnable(Pixy_UART_RX_VECT_NUM);
                      }
              
              
                      /*******************************************************************************
                      * Function Name: Pixy_UART_DisableRxInt
                      ********************************************************************************
                      *
                      * Summary:
                      *  Disable RX interrupt generation
                      *
                      * Parameters:
                      *  None.
                      *
                      * Return:
                      *  None.
                      *
                      * Theory:
                      *  Disable the interrupt output -or- the interrupt component itself
                      *
                      *******************************************************************************/
                      void Pixy_UART_DisableRxInt(void) 
                      {
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 7   

                          CyIntDisable(Pixy_UART_RX_VECT_NUM);
                      }
              
                  #endif /* Pixy_UART_RX_INTERRUPT_ENABLED */
 368          
 369          
 370              /*******************************************************************************
 371              * Function Name: Pixy_UART_SetRxInterruptMode
 372              ********************************************************************************
 373              *
 374              * Summary:
 375              *  Configure which status bits trigger an interrupt event
 376              *
 377              * Parameters:
 378              *  IntSrc:  An or'd combination of the desired status bit masks (defined in
 379              *           the header file)
 380              *
 381              * Return:
 382              *  None.
 383              *
 384              * Theory:
 385              *  Enables the output of specific status bits to the interrupt controller
 386              *
 387              *******************************************************************************/
 388              void Pixy_UART_SetRxInterruptMode(uint8 intSrc) 
 389              {
 390   1              Pixy_UART_RXSTATUS_MASK_REG  = intSrc;
 391   1          }
 392          
 393          
 394              /*******************************************************************************
 395              * Function Name: Pixy_UART_ReadRxData
 396              ********************************************************************************
 397              *
 398              * Summary:
 399              *  Returns data in RX Data register without checking status register to 
 400              *  determine if data is valid
 401              *
 402              * Parameters:
 403              *  None.
 404              *
 405              * Return:
 406              *  Received data from RX register
 407              *
 408              * Global Variables:
 409              *  Pixy_UART_rxBuffer - RAM buffer pointer for save received data.
 410              *  Pixy_UART_rxBufferWrite - cyclic index for write to rxBuffer, 
 411              *     checked to identify new data. 
 412              *  Pixy_UART_rxBufferRead - cyclic index for read from rxBuffer, 
 413              *     incremented after each byte has been read from buffer.
 414              *  Pixy_UART_rxBufferLoopDetect - creared if loop condition was detected
 415              *     in RX ISR. 
 416              *
 417              * Reentrant:
 418              *  No.
 419              *
 420              *******************************************************************************/
 421              uint8 Pixy_UART_ReadRxData(void) 
 422              {
 423   1              uint8 rxData;
 424   1      
 425   1              #if(Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH)
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 8   

              
                          /* Disable Rx interrupt. */
                          /* Protect variables that could change on interrupt. */
                          #if(Pixy_UART_RX_INTERRUPT_ENABLED)
                              Pixy_UART_DisableRxInt();
                          #endif /* End Pixy_UART_RX_INTERRUPT_ENABLED */
              
                          if( (Pixy_UART_rxBufferRead != Pixy_UART_rxBufferWrite) ||
                              (Pixy_UART_rxBufferLoopDetect > 0u) )
                          {
              
                              rxData = Pixy_UART_rxBuffer[Pixy_UART_rxBufferRead];
              
                              Pixy_UART_rxBufferRead++;
              
                              if(Pixy_UART_rxBufferRead >= Pixy_UART_RXBUFFERSIZE)
                              {
                                  Pixy_UART_rxBufferRead = 0u;
                              }
              
                              if(Pixy_UART_rxBufferLoopDetect > 0u )
                              {
                                  Pixy_UART_rxBufferLoopDetect = 0u;
                                  #if( (Pixy_UART_RX_INTERRUPT_ENABLED) && (Pixy_UART_FLOW_CONTROL != 0u) && \
                                       (Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH) )
                                      /* When Hardware Flow Control selected - return RX mask */
                                      #if( Pixy_UART_HD_ENABLED )
                                          if((Pixy_UART_CONTROL_REG & Pixy_UART_CTRL_HD_SEND) == 0)
                                          {   /* In Half duplex mode return RX mask only in RX 
                                              *  configuration set, otherwise 
                                              *  mask will be returned in LoadRxConfig() API. 
                                              */
                                              Pixy_UART_RXSTATUS_MASK_REG  |= Pixy_UART_RX_STS_FIFO_NOTEMPTY;
                                          }
                                      #else
                                          Pixy_UART_RXSTATUS_MASK_REG  |= Pixy_UART_RX_STS_FIFO_NOTEMPTY;
                                      #endif /* end Pixy_UART_HD_ENABLED */
                                  #endif /* Pixy_UART_RX_INTERRUPT_ENABLED and Hardware flow control*/
                              }
                          }
                          else
                          {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
                              rxData = Pixy_UART_RXDATA_REG;
                          }
              
                          /* Enable Rx interrupt. */
                          #if(Pixy_UART_RX_INTERRUPT_ENABLED)
                              Pixy_UART_EnableRxInt();
                          #endif /* End Pixy_UART_RX_INTERRUPT_ENABLED */
              
                      #else /* Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
 477   1      
 478   1                  /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 479   1                  rxData = Pixy_UART_RXDATA_REG;
 480   1      
 481   1              #endif /* Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
 482   1      
 483   1              return(rxData);
 484   1          }
 485          
 486          
 487              /*******************************************************************************
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 9   

 488              * Function Name: Pixy_UART_ReadRxStatus
 489              ********************************************************************************
 490              *
 491              * Summary:
 492              *  Read the current state of the status register
 493              *  And detect software buffer overflow.
 494              *
 495              * Parameters:
 496              *  None.
 497              *
 498              * Return:
 499              *  Current state of the status register.
 500              *
 501              * Global Variables:
 502              *  Pixy_UART_rxBufferOverflow - used to indicate overload condition. 
 503              *   It set to one in RX interrupt when there isn?t free space in 
 504              *   Pixy_UART_rxBufferRead to write new data. This condition returned 
 505              *   and cleared to zero by this API as an 
 506              *   Pixy_UART_RX_STS_SOFT_BUFF_OVER bit along with RX Status register 
 507              *   bits.
 508              *
 509              *******************************************************************************/
 510              uint8 Pixy_UART_ReadRxStatus(void) 
 511              {
 512   1              uint8 status;
 513   1      
 514   1              status = Pixy_UART_RXSTATUS_REG;
 515   1              status &= Pixy_UART_RX_HW_MASK;
 516   1      
 517   1              #if(Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH)
                          if( Pixy_UART_rxBufferOverflow )
                          {
                              status |= Pixy_UART_RX_STS_SOFT_BUFF_OVER;
                              Pixy_UART_rxBufferOverflow = 0u;
                          }
                      #endif /* Pixy_UART_RXBUFFERSIZE */
 524   1      
 525   1              return(status);
 526   1          }
 527          
 528          
 529              /*******************************************************************************
 530              * Function Name: Pixy_UART_GetChar
 531              ********************************************************************************
 532              *
 533              * Summary:
 534              *  Reads UART RX buffer immediately, if data is not available or an error 
 535              *  condition exists, zero is returned; otherwise, character is read and 
 536              *  returned.
 537              *
 538              * Parameters:
 539              *  None.
 540              *
 541              * Return:
 542              *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 543              *  A returned zero signifies an error condition or no data available.
 544              *
 545              * Global Variables:
 546              *  Pixy_UART_rxBuffer - RAM buffer pointer for save received data.
 547              *  Pixy_UART_rxBufferWrite - cyclic index for write to rxBuffer, 
 548              *     checked to identify new data. 
 549              *  Pixy_UART_rxBufferRead - cyclic index for read from rxBuffer, 
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 10  

 550              *     incremented after each byte has been read from buffer.
 551              *  Pixy_UART_rxBufferLoopDetect - creared if loop condition was detected
 552              *     in RX ISR. 
 553              *
 554              * Reentrant:
 555              *  No.
 556              *
 557              *******************************************************************************/
 558              uint8 Pixy_UART_GetChar(void) 
 559              {
 560   1              uint8 rxData = 0u;
 561   1              uint8 rxStatus;
 562   1      
 563   1              #if(Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH)
              
                          /* Disable Rx interrupt. */
                          /* Protect variables that could change on interrupt. */
                          #if(Pixy_UART_RX_INTERRUPT_ENABLED)
                              Pixy_UART_DisableRxInt();
                          #endif /* Pixy_UART_RX_INTERRUPT_ENABLED */
              
                          if( (Pixy_UART_rxBufferRead != Pixy_UART_rxBufferWrite) ||
                              (Pixy_UART_rxBufferLoopDetect > 0u) )
                          {
                              rxData = Pixy_UART_rxBuffer[Pixy_UART_rxBufferRead];
              
                              Pixy_UART_rxBufferRead++;
              
                              if(Pixy_UART_rxBufferRead >= Pixy_UART_RXBUFFERSIZE)
                              {
                                  Pixy_UART_rxBufferRead = 0u;
                              }
              
                              if(Pixy_UART_rxBufferLoopDetect > 0u ) 
                              {
                                  Pixy_UART_rxBufferLoopDetect = 0u;
                                  #if( (Pixy_UART_RX_INTERRUPT_ENABLED) && (Pixy_UART_FLOW_CONTROL != 0u) && \
                                       (Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH) )
                                      /* When Hardware Flow Control selected - return RX mask */
                                      #if( Pixy_UART_HD_ENABLED )
                                          if((Pixy_UART_CONTROL_REG & Pixy_UART_CTRL_HD_SEND) == 0)
                                          {   /* In Half duplex mode return RX mask only if 
                                              *  RX configuration set, otherwise 
                                              *  mask will be returned in LoadRxConfig() API. 
                                              */
                                              Pixy_UART_RXSTATUS_MASK_REG  |= Pixy_UART_RX_STS_FIFO_NOTEMPTY;
                                          }
                                      #else
                                          Pixy_UART_RXSTATUS_MASK_REG  |= Pixy_UART_RX_STS_FIFO_NOTEMPTY;
                                      #endif /* end Pixy_UART_HD_ENABLED */
                                  #endif /* Pixy_UART_RX_INTERRUPT_ENABLED and Hardware flow control*/
                              }
              
                          }
                          else
                          {   rxStatus =Pixy_UART_RXSTATUS_REG;
                              if(rxStatus & Pixy_UART_RX_STS_FIFO_NOTEMPTY)
                              {   /* Read received data from FIFO*/
                                  rxData = Pixy_UART_RXDATA_REG;
                                  /*Check status on error*/
                                  if(rxStatus & (Pixy_UART_RX_STS_BREAK | Pixy_UART_RX_STS_PAR_ERROR |
                                                 Pixy_UART_RX_STS_STOP_ERROR | Pixy_UART_RX_STS_OVERRUN))
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 11  

                                  {
                                      rxData = 0u;
                                  }    
                              }
                          }
              
                          /* Enable Rx interrupt. */
                          #if(Pixy_UART_RX_INTERRUPT_ENABLED)
                              Pixy_UART_EnableRxInt();
                          #endif /* Pixy_UART_RX_INTERRUPT_ENABLED */
              
                      #else /* Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
 624   1      
 625   1                  rxStatus =Pixy_UART_RXSTATUS_REG;
 626   1                  if(rxStatus & Pixy_UART_RX_STS_FIFO_NOTEMPTY)
 627   1                  {   /* Read received data from FIFO*/
 628   2                      rxData = Pixy_UART_RXDATA_REG;
 629   2                      /*Check status on error*/
 630   2                      if(rxStatus & (Pixy_UART_RX_STS_BREAK | Pixy_UART_RX_STS_PAR_ERROR |
 631   2                                     Pixy_UART_RX_STS_STOP_ERROR | Pixy_UART_RX_STS_OVERRUN))
 632   2                      {
 633   3                          rxData = 0u;
 634   3                      }
 635   2                  }
 636   1              #endif /* Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
 637   1      
 638   1              return(rxData);
 639   1          }
 640          
 641          
 642              /*******************************************************************************
 643              * Function Name: Pixy_UART_GetByte
 644              ********************************************************************************
 645              *
 646              * Summary:
 647              *  Grab the next available byte of data from the recieve FIFO
 648              *
 649              * Parameters:
 650              *  None.
 651              *
 652              * Return:
 653              *  MSB contains Status Register and LSB contains UART RX data
 654              *
 655              * Reentrant:
 656              *  No.
 657              *
 658              *******************************************************************************/
 659              uint16 Pixy_UART_GetByte(void) 
 660              {
 661   1              return ( ((uint16)Pixy_UART_ReadRxStatus() << 8u) | Pixy_UART_ReadRxData() );
 662   1          }
 663          
 664          
 665              /*******************************************************************************
 666              * Function Name: Pixy_UART_GetRxBufferSize
 667              ********************************************************************************
 668              *
 669              * Summary:
 670              *  Determine the amount of bytes left in the RX buffer and return the count in
 671              *  bytes
 672              *
 673              * Parameters:
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 12  

 674              *  None.
 675              *
 676              * Return:
 677              *  uint8: Integer count of the number of bytes left 
 678              *  in the RX buffer
 679              *
 680              * Global Variables:
 681              *  Pixy_UART_rxBufferWrite - used to calculate left bytes. 
 682              *  Pixy_UART_rxBufferRead - used to calculate left bytes.
 683              *  Pixy_UART_rxBufferLoopDetect - checked to decide left bytes amount. 
 684              *
 685              * Reentrant:
 686              *  No.
 687              *
 688              * Theory:
 689              *  Allows the user to find out how full the RX Buffer is.
 690              *
 691              *******************************************************************************/
 692              uint8 Pixy_UART_GetRxBufferSize(void) 
 693                                                                      
 694              {
 695   1              uint8 size;
 696   1      
 697   1              #if(Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH)
              
                          /* Disable Rx interrupt. */
                          /* Protect variables that could change on interrupt. */
                          #if(Pixy_UART_RX_INTERRUPT_ENABLED)
                              Pixy_UART_DisableRxInt();
                          #endif /* Pixy_UART_RX_INTERRUPT_ENABLED */
              
                          if(Pixy_UART_rxBufferRead == Pixy_UART_rxBufferWrite)
                          {
                              if(Pixy_UART_rxBufferLoopDetect > 0u)
                              {
                                  size = Pixy_UART_RXBUFFERSIZE;
                              }
                              else
                              {
                                  size = 0u;
                              }
                          }
                          else if(Pixy_UART_rxBufferRead < Pixy_UART_rxBufferWrite)
                          {
                              size = (Pixy_UART_rxBufferWrite - Pixy_UART_rxBufferRead);
                          }
                          else
                          {
                              size = (Pixy_UART_RXBUFFERSIZE - Pixy_UART_rxBufferRead) + Pixy_UART_rxBufferWrite;
                          }
              
                          /* Enable Rx interrupt. */
                          #if(Pixy_UART_RX_INTERRUPT_ENABLED)
                              Pixy_UART_EnableRxInt();
                          #endif /* End Pixy_UART_RX_INTERRUPT_ENABLED */
              
                      #else /* Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
 731   1      
 732   1                  /* We can only know if there is data in the fifo. */
 733   1                  size = (Pixy_UART_RXSTATUS_REG & Pixy_UART_RX_STS_FIFO_NOTEMPTY) ? 1u : 0u;
 734   1      
 735   1              #endif /* End Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 13  

 736   1      
 737   1              return(size);
 738   1          }
 739          
 740          
 741              /*******************************************************************************
 742              * Function Name: Pixy_UART_ClearRxBuffer
 743              ********************************************************************************
 744              *
 745              * Summary:
 746              *  Clears the RX RAM buffer by setting the read and write pointers both to zero.
 747              *  Clears hardware RX FIFO.
 748              *
 749              * Parameters:
 750              *  None.
 751              *
 752              * Return:
 753              *  None.
 754              *
 755              * Global Variables:
 756              *  Pixy_UART_rxBufferWrite - cleared to zero. 
 757              *  Pixy_UART_rxBufferRead - cleared to zero.
 758              *  Pixy_UART_rxBufferLoopDetect - cleared to zero. 
 759              *  Pixy_UART_rxBufferOverflow - cleared to zero. 
 760              *
 761              * Reentrant:
 762              *  No.
 763              *
 764              * Theory:
 765              *  Setting the pointers to zero makes the system believe there is no data to 
 766              *  read and writing will resume at address 0 overwriting any data that may 
 767              *  have remained in the RAM.
 768              *
 769              * Side Effects:
 770              *  Any received data not read from the RAM or FIFO buffer will be lost.
 771              *******************************************************************************/
 772              void Pixy_UART_ClearRxBuffer(void) 
 773              {
 774   1              uint8 enableInterrupts;
 775   1              
 776   1              /* clear the HW FIFO */
 777   1              /* Enter critical section */
 778   1              enableInterrupts = CyEnterCriticalSection();        
 779   1              Pixy_UART_RXDATA_AUX_CTL_REG |=  Pixy_UART_RX_FIFO_CLR;
 780   1              Pixy_UART_RXDATA_AUX_CTL_REG &= ~Pixy_UART_RX_FIFO_CLR;
 781   1              /* Exit critical section */
 782   1              CyExitCriticalSection(enableInterrupts);
 783   1              
 784   1              #if(Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH)
                          /* Disable Rx interrupt. */
                          /* Protect variables that could change on interrupt. */
                          #if(Pixy_UART_RX_INTERRUPT_ENABLED)
                              Pixy_UART_DisableRxInt();
                          #endif /* End Pixy_UART_RX_INTERRUPT_ENABLED */
              
                          Pixy_UART_rxBufferRead = 0u;
                          Pixy_UART_rxBufferWrite = 0u;
                          Pixy_UART_rxBufferLoopDetect = 0u;
                          Pixy_UART_rxBufferOverflow = 0u;
              
                          /* Enable Rx interrupt. */
                          #if(Pixy_UART_RX_INTERRUPT_ENABLED)
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 14  

                              Pixy_UART_EnableRxInt();
                          #endif /* End Pixy_UART_RX_INTERRUPT_ENABLED */
                      #endif /* End Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
 801   1              
 802   1          }
 803          
 804          
 805              /*******************************************************************************
 806              * Function Name: Pixy_UART_SetRxAddressMode
 807              ********************************************************************************
 808              *
 809              * Summary:
 810              *  Set the receive addressing mode
 811              *
 812              * Parameters:
 813              *  addressMode: Enumerated value indicating the mode of RX addressing
 814              *  Pixy_UART__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address 
 815              *                                               detection
 816              *  Pixy_UART__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer 
 817              *                                               address detection
 818              *  Pixy_UART__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address 
 819              *                                               detection
 820              *  Pixy_UART__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer 
 821              *                                               address detection
 822              *  Pixy_UART__B_UART__AM_NONE - No address detection
 823              *
 824              * Return:
 825              *  None.
 826              *
 827              * Global Variables:
 828              *  Pixy_UART_rxAddressMode - the parameter stored in this variable for 
 829              *   the farther usage in RX ISR.
 830              *  Pixy_UART_rxAddressDetected - set to initial state (0).
 831              *
 832              *******************************************************************************/
 833              void Pixy_UART_SetRxAddressMode(uint8 addressMode)  
 834                                                                  
 835              {
 836   1              #if(Pixy_UART_RXHW_ADDRESS_ENABLED)
                          #if(Pixy_UART_CONTROL_REG_REMOVED)
                              addressMode = addressMode;
                          #else /* Pixy_UART_CONTROL_REG_REMOVED */
                              uint8 tmpCtrl = 0u;
                              tmpCtrl = Pixy_UART_CONTROL_REG & ~Pixy_UART_CTRL_RXADDR_MODE_MASK;
                              tmpCtrl |= ((addressMode << Pixy_UART_CTRL_RXADDR_MODE0_SHIFT) & 
                                         Pixy_UART_CTRL_RXADDR_MODE_MASK);
                              Pixy_UART_CONTROL_REG = tmpCtrl;
                              #if(Pixy_UART_RX_INTERRUPT_ENABLED && \
                                 (Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH) )
                                  Pixy_UART_rxAddressMode = addressMode;
                                  Pixy_UART_rxAddressDetected = 0u;
                              #endif /* End Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH*/   
                          #endif /* End Pixy_UART_CONTROL_REG_REMOVED */
                      #else /* Pixy_UART_RXHW_ADDRESS_ENABLED */
 852   1                  addressMode = addressMode;
 853   1              #endif /* End Pixy_UART_RXHW_ADDRESS_ENABLED */
 854   1          }
 855          
 856          
 857              /*******************************************************************************
 858              * Function Name: Pixy_UART_SetRxAddress1
 859              ********************************************************************************
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 15  

 860              *
 861              * Summary:
 862              *  Set the first hardware address compare value
 863              *
 864              * Parameters:
 865              *  address
 866              *
 867              * Return:
 868              *  None.
 869              *
 870              *******************************************************************************/
 871              void Pixy_UART_SetRxAddress1(uint8 address) 
 872          
 873              {
 874   1              Pixy_UART_RXADDRESS1_REG = address;
 875   1          }
 876          
 877          
 878              /*******************************************************************************
 879              * Function Name: Pixy_UART_SetRxAddress2
 880              ********************************************************************************
 881              *
 882              * Summary:
 883              *  Set the second hardware address compare value
 884              *
 885              * Parameters:
 886              *  address
 887              *
 888              * Return:
 889              *  None.
 890              *
 891              *******************************************************************************/
 892              void Pixy_UART_SetRxAddress2(uint8 address) 
 893              {
 894   1              Pixy_UART_RXADDRESS2_REG = address;
 895   1          }
 896                  
 897          #endif  /* Pixy_UART_RX_ENABLED || Pixy_UART_HD_ENABLED*/
 898          
 899          
 900          #if( (Pixy_UART_TX_ENABLED) || (Pixy_UART_HD_ENABLED) )
              
                  #if(Pixy_UART_TX_INTERRUPT_ENABLED)
              
                      /*******************************************************************************
                      * Function Name: Pixy_UART_EnableTxInt
                      ********************************************************************************
                      *
                      * Summary:
                      *  Enable TX interrupt generation
                      *
                      * Parameters:
                      *  None.
                      *
                      * Return:
                      *  None.
                      *
                      * Theory:
                      *  Enable the interrupt output -or- the interrupt component itself
                      *
                      *******************************************************************************/
                      void Pixy_UART_EnableTxInt(void) 
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 16  

                      {
                          CyIntEnable(Pixy_UART_TX_VECT_NUM);
                      }
              
              
                      /*******************************************************************************
                      * Function Name: Pixy_UART_DisableTxInt
                      ********************************************************************************
                      *
                      * Summary:
                      *  Disable TX interrupt generation
                      *
                      * Parameters:
                      *  None.
                      *
                      * Return:
                      *  None.
                      *
                      * Theory:
                      *  Disable the interrupt output -or- the interrupt component itself
                      *
                      *******************************************************************************/
                      void Pixy_UART_DisableTxInt(void) 
                      {
                          CyIntDisable(Pixy_UART_TX_VECT_NUM);
                      }
              
                  #endif /* Pixy_UART_TX_INTERRUPT_ENABLED */
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_SetTxInterruptMode
                  ********************************************************************************
                  *
                  * Summary:
                  *  Configure which status bits trigger an interrupt event
                  *
                  * Parameters:
                  *  intSrc: An or'd combination of the desired status bit masks (defined in
                  *          the header file)
                  *
                  * Return:
                  *  None.
                  *
                  * Theory:
                  *  Enables the output of specific status bits to the interrupt controller
                  *
                  *******************************************************************************/
                  void Pixy_UART_SetTxInterruptMode(uint8 intSrc) 
                  {
                      Pixy_UART_TXSTATUS_MASK_REG = intSrc;
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_WriteTxData
                  ********************************************************************************
                  *
                  * Summary:
                  *  Write a byte of data to the Transmit FIFO or TX buffer to be sent when the 
                  *  bus is available. WriteTxData sends a byte without checking for buffer room 
                  *  or status. It is up to the user to separately check status.    
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 17  

                  *
                  * Parameters:
                  *  TXDataByte: byte of data to place in the transmit FIFO
                  *
                  * Return:
                  * void
                  *
                  * Global Variables:
                  *  Pixy_UART_txBuffer - RAM buffer pointer for save data for transmission
                  *  Pixy_UART_txBufferWrite - cyclic index for write to txBuffer, 
                  *    incremented after each byte saved to buffer.
                  *  Pixy_UART_txBufferRead - cyclic index for read from txBuffer, 
                  *    checked to identify the condition to write to FIFO directly or to TX buffer
                  *  Pixy_UART_initVar - checked to identify that the component has been  
                  *    initialized.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void Pixy_UART_WriteTxData(uint8 txDataByte) 
                  {
                      /* If not Initialized then skip this function*/
                      if(Pixy_UART_initVar != 0u)
                      {
                          #if(Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH)
              
                              /* Disable Tx interrupt. */
                              /* Protect variables that could change on interrupt. */
                              #if(Pixy_UART_TX_INTERRUPT_ENABLED)
                                  Pixy_UART_DisableTxInt();
                              #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED */
              
                              if( (Pixy_UART_txBufferRead == Pixy_UART_txBufferWrite) &&
                                 !(Pixy_UART_TXSTATUS_REG & Pixy_UART_TX_STS_FIFO_FULL) )
                              {
                                  /* Add directly to the FIFO. */
                                  Pixy_UART_TXDATA_REG = txDataByte;
                              }
                              else
                              {
                                  if(Pixy_UART_txBufferWrite >= Pixy_UART_TXBUFFERSIZE)
                                  {
                                      Pixy_UART_txBufferWrite = 0;
                                  }
              
                                  Pixy_UART_txBuffer[Pixy_UART_txBufferWrite] = txDataByte;
              
                                  /* Add to the software buffer. */
                                  Pixy_UART_txBufferWrite++;
              
                              }
              
                              /* Enable Tx interrupt. */
                              #if(Pixy_UART_TX_INTERRUPT_ENABLED)
                                  Pixy_UART_EnableTxInt();
                              #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED */
              
                          #else /* Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
              
                              /* Add directly to the FIFO. */
                              Pixy_UART_TXDATA_REG = txDataByte;
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 18  

              
                          #endif /* End Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_ReadTxStatus
                  ********************************************************************************
                  *
                  * Summary:
                  *  Read the status register for the component
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  Contents of the status register
                  *
                  * Theory:
                  *  This function reads the status register which is clear on read. It is up to 
                  *  the user to handle all bits in this return value accordingly, even if the bit 
                  *  was not enabled as an interrupt source the event happened and must be handled
                  *  accordingly.    
                  *
                  *******************************************************************************/
                  uint8 Pixy_UART_ReadTxStatus(void) 
                  {
                      return(Pixy_UART_TXSTATUS_REG);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_PutChar
                  ********************************************************************************
                  *
                  * Summary:
                  *  Wait to send byte until TX register or buffer has room.
                  *
                  * Parameters:
                  *  txDataByte: The 8-bit data value to send across the UART.
                  *
                  * Return:
                  *  None.
                  *
                  * Global Variables:
                  *  Pixy_UART_txBuffer - RAM buffer pointer for save data for transmission
                  *  Pixy_UART_txBufferWrite - cyclic index for write to txBuffer, 
                  *     checked to identify free space in txBuffer and incremented after each byte 
                  *     saved to buffer.
                  *  Pixy_UART_txBufferRead - cyclic index for read from txBuffer, 
                  *     checked to identify free space in txBuffer.
                  *  Pixy_UART_initVar - checked to identify that the component has been  
                  *     initialized.
                  *
                  * Reentrant:
                  *  No.
                  *
                  * Theory:
                  *  Allows the user to transmit any byte of data in a single transfer
                  *
                  *******************************************************************************/
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 19  

                  void Pixy_UART_PutChar(uint8 txDataByte) 
                  {
                          #if(Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH)
              
                              /* Block if buffer is full, so we dont overwrite. */
                              while( Pixy_UART_txBufferWrite == (Pixy_UART_txBufferRead - 1u) ||
                                  (uint8)(Pixy_UART_txBufferWrite - Pixy_UART_txBufferRead) ==
                                  (uint8)(Pixy_UART_TXBUFFERSIZE - 1u) )
                              {
                                  /* Software buffer is full. */
                              }
                              /* Disable Tx interrupt. */
                              /* Protect variables that could change on interrupt. */
                              #if(Pixy_UART_TX_INTERRUPT_ENABLED)
                                  Pixy_UART_DisableTxInt();
                              #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED */
              
                              if( (Pixy_UART_txBufferRead == Pixy_UART_txBufferWrite) &&
                                 !(Pixy_UART_TXSTATUS_REG & Pixy_UART_TX_STS_FIFO_FULL) )
                              {
                                  /* Add directly to the FIFO. */
                                  Pixy_UART_TXDATA_REG = txDataByte;
                              }
                              else
                              {
                                  if(Pixy_UART_txBufferWrite >= Pixy_UART_TXBUFFERSIZE)
                                  {
                                      Pixy_UART_txBufferWrite = 0;
                                  }
              
                                  Pixy_UART_txBuffer[Pixy_UART_txBufferWrite] = txDataByte;
              
                                  /* Add to the software buffer. */
                                  Pixy_UART_txBufferWrite++;
              
                              }
              
                              /* Enable Rx interrupt. */
                              #if(Pixy_UART_TX_INTERRUPT_ENABLED)
                                  Pixy_UART_EnableTxInt();
                              #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED */
              
                          #else /* Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
              
                              /* Block if there isnt room. */
                              while(Pixy_UART_TXSTATUS_REG & Pixy_UART_TX_STS_FIFO_FULL);
              
                              /* Add directly to the FIFO. */
                              Pixy_UART_TXDATA_REG = txDataByte;
              
                          #endif /* End Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_PutString
                  ********************************************************************************
                  *
                  * Summary:
                  *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
                  *
                  * Parameters:
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 20  

                  *  string: char pointer to character string of Data to Send.
                  *
                  * Return:
                  *  None.
                  *
                  * Global Variables:
                  *  Pixy_UART_initVar - checked to identify that the component has been  
                  *     initialized.
                  *
                  * Reentrant:
                  *  No.
                  *
                  * Theory:
                  *  This function will block if there is not enough memory to place the whole 
                  *  string, it will block until the entire string has been written to the 
                  *  transmit buffer.
                  *
                  *******************************************************************************/
                  void Pixy_UART_PutString(char* string) 
                  {
                      /* If not Initialized then skip this function*/
                      if(Pixy_UART_initVar != 0u)
                      {
                          /* This is a blocking function, it will not exit until all data is sent*/
                          while(*string != 0u)
                          {
                              Pixy_UART_PutChar(*string++);
                          }
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_PutArray
                  ********************************************************************************
                  *
                  * Summary:
                  *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
                  *
                  * Parameters:
                  *  string: Address of the memory array residing in RAM or ROM.
                  *  byteCount: Number of Bytes to be transmitted.
                  *
                  * Return:
                  *  None.
                  *
                  * Global Variables:
                  *  Pixy_UART_initVar - checked to identify that the component has been  
                  *     initialized.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void Pixy_UART_PutArray(uint8* string, uint8 byteCount) 
                                                                                  
                  {
                      /* If not Initialized then skip this function*/
                      if(Pixy_UART_initVar != 0u)
                      {
                          while(byteCount > 0u)
                          {
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 21  

                              Pixy_UART_PutChar(*string++);
                              byteCount--;
                          }
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_PutCRLF
                  ********************************************************************************
                  *
                  * Summary:
                  *  Write a character and then carriage return and line feed.
                  *
                  * Parameters:
                  *  txDataByte: uint8 Character to send.
                  *
                  * Return:
                  *  None.
                  *
                  * Global Variables:
                  *  Pixy_UART_initVar - checked to identify that the component has been  
                  *     initialized.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  void Pixy_UART_PutCRLF(uint8 txDataByte) 
                  {
                      /* If not Initialized then skip this function*/
                      if(Pixy_UART_initVar != 0u)
                      {
                          Pixy_UART_PutChar(txDataByte);
                          Pixy_UART_PutChar(0x0Du);
                          Pixy_UART_PutChar(0x0Au);
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_GetTxBufferSize
                  ********************************************************************************
                  *
                  * Summary:
                  *  Determine the amount of space left in the TX buffer and return the count in
                  *  bytes
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  Integer count of the number of bytes left in the TX buffer
                  *
                  * Global Variables:
                  *  Pixy_UART_txBufferWrite - used to calculate left space. 
                  *  Pixy_UART_txBufferRead - used to calculate left space.
                  *
                  * Reentrant:
                  *  No.
                  *
                  * Theory:
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 22  

                  *  Allows the user to find out how full the TX Buffer is.
                  *
                  *******************************************************************************/
                  uint8 Pixy_UART_GetTxBufferSize(void) 
                                                                          
                  {
                      uint8 size;
              
                      #if(Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH)
              
                          /* Disable Tx interrupt. */
                          /* Protect variables that could change on interrupt. */
                          #if(Pixy_UART_TX_INTERRUPT_ENABLED)
                              Pixy_UART_DisableTxInt();
                          #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED */
              
                          if(Pixy_UART_txBufferRead == Pixy_UART_txBufferWrite)
                          {
                              size = 0u;
                          }
                          else if(Pixy_UART_txBufferRead < Pixy_UART_txBufferWrite)
                          {
                              size = (Pixy_UART_txBufferWrite - Pixy_UART_txBufferRead);
                          }
                          else
                          {
                              size = (Pixy_UART_TXBUFFERSIZE - Pixy_UART_txBufferRead) + Pixy_UART_txBufferWrite;
                          }
              
                          /* Enable Tx interrupt. */
                          #if(Pixy_UART_TX_INTERRUPT_ENABLED)
                              Pixy_UART_EnableTxInt();
                          #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED */
              
                      #else /* Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
              
                          size = Pixy_UART_TXSTATUS_REG;
              
                          /* Is the fifo is full. */
                          if(size & Pixy_UART_TX_STS_FIFO_FULL)
                          {
                              size = Pixy_UART_FIFO_LENGTH;
                          }
                          else if(size & Pixy_UART_TX_STS_FIFO_EMPTY)
                          {
                              size = 0u;
                          }
                          else
                          {
                              /* We only know there is data in the fifo. */
                              size = 1u;
                          }
              
                      #endif /* End Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
              
                      return(size);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_ClearTxBuffer
                  ********************************************************************************
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 23  

                  *
                  * Summary:
                  *  Clears the TX RAM buffer by setting the read and write pointers both to zero.
                  *  Clears the hardware TX FIFO.  Any data present in the FIFO will not be sent.
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  * Global Variables:
                  *  Pixy_UART_txBufferWrite - cleared to zero. 
                  *  Pixy_UART_txBufferRead - cleared to zero.
                  *
                  * Reentrant:
                  *  No.
                  *
                  * Theory:
                  *  Setting the pointers to zero makes the system believe there is no data to 
                  *  read and writing will resume at address 0 overwriting any data that may have
                  *  remained in the RAM.
                  *
                  * Side Effects:
                  *  Any received data not read from the RAM buffer will be lost when overwritten.
                  *
                  *******************************************************************************/
                  void Pixy_UART_ClearTxBuffer(void) 
                  {
                      uint8 enableInterrupts;
                      
                      /* Enter critical section */
                      enableInterrupts = CyEnterCriticalSection();        
                      /* clear the HW FIFO */
                      Pixy_UART_TXDATA_AUX_CTL_REG |=  Pixy_UART_TX_FIFO_CLR;
                      Pixy_UART_TXDATA_AUX_CTL_REG &= ~Pixy_UART_TX_FIFO_CLR;
                      /* Exit critical section */
                      CyExitCriticalSection(enableInterrupts);
              
                      #if(Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH)
              
                          /* Disable Tx interrupt. */
                          /* Protect variables that could change on interrupt. */
                          #if(Pixy_UART_TX_INTERRUPT_ENABLED)
                              Pixy_UART_DisableTxInt();
                          #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED */
              
                          Pixy_UART_txBufferRead = 0u;
                          Pixy_UART_txBufferWrite = 0u;
              
                          /* Enable Tx interrupt. */
                          #if(Pixy_UART_TX_INTERRUPT_ENABLED)
                              Pixy_UART_EnableTxInt();
                          #endif /* End Pixy_UART_TX_INTERRUPT_ENABLED */
              
                      #endif /* End Pixy_UART_TXBUFFERSIZE > Pixy_UART_FIFO_LENGTH */
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_SendBreak
                  ********************************************************************************
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 24  

                  *
                  * Summary:
                  *  Write a Break command to the UART
                  *
                  * Parameters:
                  *  uint8 retMode:  Wait mode,
                  *   0 - Initialize registers for Break, sends the Break signal and return 
                  *       imediately.
                  *   1 - Wait until Break sending is complete, reinitialize registers to normal
                  *       transmission mode then return.
                  *   2 - Reinitialize registers to normal transmission mode then return.
                  *   3 - both steps: 0 and 1
                  *       init registers for Break, send Break signal
                  *       wait until Break sending is complete, reinit registers to normal
                  *       transmission mode then return.
                  *
                  * Return:
                  *  None.
                  *
                  * Global Variables:
                  *  Pixy_UART_initVar - checked to identify that the component has been  
                  *     initialized.
                  *  tx_period - static variable, used for keeping TX period configuration.
                  *
                  * Reentrant:
                  *  No.
                  *
                  * Theory:
                  *  SendBreak function initializes registers to send 13-bit break signal. It is
                  *  important to return the registers configuration to normal for continue 8-bit
                  *  operation.
                  *  Trere are 3 variants for this API usage:
                  *  1) SendBreak(3) - function will send the Break signal and take care on the
                  *     configuration returning. Funcition will block CPU untill transmition 
                  *     complete.
                  *  2) User may want to use bloking time if UART configured to the low speed 
                  *     operation
                  *     Emample for this case:
                  *     SendBreak(0);     - init Break signal transmition
                  *         Add your code here to use CPU time
                  *     SendBreak(1);     - complete Break operation
                  *  3) Same to 2) but user may want to init and use the interrupt for complete 
                  *     break operation.
                  *     Example for this case:
                  *     Init TX interrupt whith "TX - On TX Complete" parameter
                  *     SendBreak(0);     - init Break signal transmition
                  *         Add your code here to use CPU time
                  *     When interrupt appear with UART_TX_STS_COMPLETE status:
                  *     SendBreak(2);     - complete Break operation
                  *
                  * Side Effects:
                  *   Uses static variable to keep registers configuration.
                  *
                  *******************************************************************************/
                  void Pixy_UART_SendBreak(uint8 retMode) 
                  {
              
                      /* If not Initialized then skip this function*/
                      if(Pixy_UART_initVar != 0u)
                      {
                          /*Set the Counter to 13-bits and transmit a 00 byte*/
                          /*When that is done then reset the counter value back*/
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 25  

                          uint8 tmpStat;
              
                          #if(Pixy_UART_HD_ENABLED) /* Half Duplex mode*/
              
                              if( (retMode == Pixy_UART_SEND_BREAK) ||
                                  (retMode == Pixy_UART_SEND_WAIT_REINIT ) )
                              {
                                  /* CTRL_HD_SEND_BREAK - sends break bits in HD mode*/
                                  Pixy_UART_WriteControlRegister(Pixy_UART_ReadControlRegister() |
                                                                        Pixy_UART_CTRL_HD_SEND_BREAK);
                                  /* Send zeros*/
                                  Pixy_UART_TXDATA_REG = 0u;
              
                                  do /*wait until transmit starts*/
                                  {
                                      tmpStat = Pixy_UART_TXSTATUS_REG;
                                  }while(tmpStat & Pixy_UART_TX_STS_FIFO_EMPTY);
                              }
              
                              if( (retMode == Pixy_UART_WAIT_FOR_COMPLETE_REINIT) ||
                                  (retMode == Pixy_UART_SEND_WAIT_REINIT) )
                              {
                                  do /*wait until transmit complete*/
                                  {
                                      tmpStat = Pixy_UART_TXSTATUS_REG;
                                  }while(~tmpStat & Pixy_UART_TX_STS_COMPLETE);
                              }
              
                              if( (retMode == Pixy_UART_WAIT_FOR_COMPLETE_REINIT) ||
                                  (retMode == Pixy_UART_REINIT) ||
                                  (retMode == Pixy_UART_SEND_WAIT_REINIT) )
                              {
                                  Pixy_UART_WriteControlRegister(Pixy_UART_ReadControlRegister() &
                                                                       ~Pixy_UART_CTRL_HD_SEND_BREAK);
                              }
              
                          #else /* Pixy_UART_HD_ENABLED Full Duplex mode */
              
                              static uint8 tx_period; 
                              
                              if( (retMode == Pixy_UART_SEND_BREAK) ||
                                  (retMode == Pixy_UART_SEND_WAIT_REINIT) )
                              {
                                  /* CTRL_HD_SEND_BREAK - skip to send parity bit @ Break signal in Full Duplex mode*/
                                  if( (Pixy_UART_PARITY_TYPE != Pixy_UART__B_UART__NONE_REVB) ||
                                       Pixy_UART_PARITY_TYPE_SW )
                                  {
                                      Pixy_UART_WriteControlRegister(Pixy_UART_ReadControlRegister() |
                                                                            Pixy_UART_CTRL_HD_SEND_BREAK);
                                  }                                                          
              
                                  #if(Pixy_UART_TXCLKGEN_DP)
                                      tx_period = Pixy_UART_TXBITCLKTX_COMPLETE_REG;
                                      Pixy_UART_TXBITCLKTX_COMPLETE_REG = Pixy_UART_TXBITCTR_BREAKBITS;
                                  #else
                                      tx_period = Pixy_UART_TXBITCTR_PERIOD_REG;
                                      Pixy_UART_TXBITCTR_PERIOD_REG = Pixy_UART_TXBITCTR_BREAKBITS8X;
                                  #endif /* End Pixy_UART_TXCLKGEN_DP */
              
                                  /* Send zeros*/
                                  Pixy_UART_TXDATA_REG = 0u;
              
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 26  

                                  do /*wait until transmit starts*/
                                  {
                                      tmpStat = Pixy_UART_TXSTATUS_REG;
                                  }while(tmpStat & Pixy_UART_TX_STS_FIFO_EMPTY);
                              }
              
                              if( (retMode == Pixy_UART_WAIT_FOR_COMPLETE_REINIT) ||
                                  (retMode == Pixy_UART_SEND_WAIT_REINIT) )
                              {
                                  do /*wait until transmit complete*/
                                  {
                                      tmpStat = Pixy_UART_TXSTATUS_REG;
                                  }while(~tmpStat & Pixy_UART_TX_STS_COMPLETE);
                              }
              
                              if( (retMode == Pixy_UART_WAIT_FOR_COMPLETE_REINIT) ||
                                  (retMode == Pixy_UART_REINIT) ||
                                  (retMode == Pixy_UART_SEND_WAIT_REINIT) )
                              {
              
                                  #if(Pixy_UART_TXCLKGEN_DP)
                                      Pixy_UART_TXBITCLKTX_COMPLETE_REG = tx_period;
                                  #else
                                      Pixy_UART_TXBITCTR_PERIOD_REG = tx_period;
                                  #endif /* End Pixy_UART_TXCLKGEN_DP */
              
                                  if( (Pixy_UART_PARITY_TYPE != Pixy_UART__B_UART__NONE_REVB) || 
                                       Pixy_UART_PARITY_TYPE_SW )
                                  {
                                      Pixy_UART_WriteControlRegister(Pixy_UART_ReadControlRegister() &
                                                                           ~Pixy_UART_CTRL_HD_SEND_BREAK);
                                  }                                     
                              }
                          #endif    /* End Pixy_UART_HD_ENABLED */
                      }
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_SetTxAddressMode
                  ********************************************************************************
                  *
                  * Summary:
                  *  Set the transmit addressing mode
                  *
                  * Parameters:
                  *  addressMode: 0 -> Space
                  *               1 -> Mark
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  void Pixy_UART_SetTxAddressMode(uint8 addressMode) 
                  {
                      /* Mark/Space sending enable*/
                      if(addressMode != 0)
                      {
                          Pixy_UART_WriteControlRegister(Pixy_UART_ReadControlRegister() | Pixy_UART_CTRL_MARK);
                      }
                      else
                      {
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 27  

                          Pixy_UART_WriteControlRegister(Pixy_UART_ReadControlRegister() & ~Pixy_UART_CTRL_MARK);
                      }
                  }
              
              #endif  /* EndPixy_UART_TX_ENABLED */
1609          
1610          #if(Pixy_UART_HD_ENABLED)
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_LoadTxConfig
                  ********************************************************************************
                  *
                  * Summary:
                  *  Unloads the Rx configuration if required and loads the
                  *  Tx configuration. It is the users responsibility to ensure that any
                  *  transaction is complete and it is safe to unload the Tx
                  *  configuration.
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  * Theory:
                  *  Valid only for half duplex UART. 
                  *
                  * Side Effects:
                  *  Disable RX interrupt mask, when software buffer has been used.
                  *
                  *******************************************************************************/
                  void Pixy_UART_LoadTxConfig(void) 
                  {
                      #if((Pixy_UART_RX_INTERRUPT_ENABLED) && (Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH))
                          /* Disable RX interrupts before set TX configuration */
                          Pixy_UART_SetRxInterruptMode(0);
                      #endif /* Pixy_UART_RX_INTERRUPT_ENABLED */
              
                      Pixy_UART_WriteControlRegister(Pixy_UART_ReadControlRegister() | Pixy_UART_CTRL_HD_SEND);
                      Pixy_UART_RXBITCTR_PERIOD_REG = Pixy_UART_HD_TXBITCTR_INIT;
                      #if(CY_UDB_V0) /* Manually clear status register when mode has been changed */
                          /* Clear status register */
                          CY_GET_REG8(Pixy_UART_RXSTATUS_PTR);
                      #endif /* CY_UDB_V0 */
                  }
              
              
                  /*******************************************************************************
                  * Function Name: Pixy_UART_LoadRxConfig
                  ********************************************************************************
                  *
                  * Summary:
                  *  Unloads the Tx configuration if required and loads the
                  *  Rx configuration. It is the users responsibility to ensure that any
                  *  transaction is complete and it is safe to unload the Rx
                  *  configuration.
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 28  

                  *  None.
                  *
                  * Theory:
                  *  Valid only for half duplex UART
                  *
                  * Side Effects:
                  *  Set RX interrupt mask based on customizer settings, when software buffer 
                  *  has been used.
                  *
                  *******************************************************************************/
                  void Pixy_UART_LoadRxConfig(void) 
                  {
                      Pixy_UART_WriteControlRegister(Pixy_UART_ReadControlRegister() & ~Pixy_UART_CTRL_HD_SEND);
                      Pixy_UART_RXBITCTR_PERIOD_REG = Pixy_UART_HD_RXBITCTR_INIT;
                      #if(CY_UDB_V0) /* Manually clear status register when mode has been changed */
                          /* Clear status register */
                          CY_GET_REG8(Pixy_UART_RXSTATUS_PTR);
                      #endif /* CY_UDB_V0 */
              
                      #if((Pixy_UART_RX_INTERRUPT_ENABLED) && (Pixy_UART_RXBUFFERSIZE > Pixy_UART_FIFO_LENGTH))
                          /* Enable RX interrupt after set RX configuration */
                          Pixy_UART_SetRxInterruptMode(Pixy_UART_INIT_RX_INTERRUPTS_MASK);    
                      #endif /* Pixy_UART_RX_INTERRUPT_ENABLED */
                  }
              
              #endif  /* Pixy_UART_HD_ENABLED */
1692          
1693          
1694          /* [] END OF FILE */
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 29  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Pixy_UART_Start (BEGIN)
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 79
0000 900000      R     MOV     DPTR,#Pixy_UART_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
0008 120000      R     LCALL   Pixy_UART_Init
                                           ; SOURCE LINE # 82
000B 900000      R     MOV     DPTR,#Pixy_UART_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0011         ?C0001:
                                           ; SOURCE LINE # 84
0011 120000      R     LCALL   Pixy_UART_Enable
                                           ; SOURCE LINE # 85
0014 22                RET     
             ; FUNCTION Pixy_UART_Start (END)

             ; FUNCTION Pixy_UART_Init (BEGIN)
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 121
0000 906588            MOV     DPTR,#06588H
0003 7420              MOV     A,#020H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
0006 22                RET     
             ; FUNCTION Pixy_UART_Init (END)

             ; FUNCTION Pixy_UART_Enable (BEGIN)
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 180
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
0008 90659A            MOV     DPTR,#0659AH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4420              ORL     A,#020H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0013 906598            MOV     DPTR,#06598H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4410              ORL     A,#010H
001B FF                MOV     R7,A
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 30  

001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
001E 9043A2            MOV     DPTR,#043A2H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 4440              ORL     A,#040H
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
0029 900000      R     MOV     DPTR,#enableInterrupts
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 213
0031 22                RET     
             ; FUNCTION Pixy_UART_Enable (END)

             ; FUNCTION Pixy_UART_Stop (BEGIN)
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 233
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
0008 90659A            MOV     DPTR,#0659AH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54DF              ANL     A,#0DFH
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
0013 9043A2            MOV     DPTR,#043A2H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54BF              ANL     A,#0BFH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
001E 906598            MOV     DPTR,#06598H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 54EF              ANL     A,#0EFH
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0029 900000      R     MOV     DPTR,#enableInterrupts
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 267
0031 22                RET     
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 31  

             ; FUNCTION Pixy_UART_Stop (END)

             ; FUNCTION Pixy_UART_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 287
0000 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 291
0002         ?C0006:
0002 22                RET     
             ; FUNCTION Pixy_UART_ReadControlRegister (END)

             ; FUNCTION _Pixy_UART_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 308
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 311
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#control
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
000F 22                RET     
             ; FUNCTION _Pixy_UART_WriteControlRegister (END)

             ; FUNCTION _Pixy_UART_SetRxInterruptMode (BEGIN)
                                           ; SOURCE LINE # 388
0000 900000      R     MOV     DPTR,#intSrc
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
0005 900000      R     MOV     DPTR,#intSrc
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906588            MOV     DPTR,#06588H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 391
000F 22                RET     
             ; FUNCTION _Pixy_UART_SetRxInterruptMode (END)

             ; FUNCTION Pixy_UART_ReadRxData (BEGIN)
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 479
0000 906548            MOV     DPTR,#06548H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#rxData
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
000A 900000      R     MOV     DPTR,#rxData
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
                                           ; SOURCE LINE # 484
000F         ?C0009:
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 32  

000F 22                RET     
             ; FUNCTION Pixy_UART_ReadRxData (END)

             ; FUNCTION Pixy_UART_ReadRxStatus (BEGIN)
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 514
0000 906568            MOV     DPTR,#06568H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#status
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
000A 900000      R     MOV     DPTR,#status
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 547F              ANL     A,#07FH
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#status
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0018 900000      R     MOV     DPTR,#status
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
                                           ; SOURCE LINE # 526
001D         ?C0010:
001D 22                RET     
             ; FUNCTION Pixy_UART_ReadRxStatus (END)

             ; FUNCTION Pixy_UART_GetChar (BEGIN)
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 559
                                           ; SOURCE LINE # 560
0000 900000      R     MOV     DPTR,#rxData
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 625
0005 906568            MOV     DPTR,#06568H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rxStatus
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 626
000F 900000      R     MOV     DPTR,#rxStatus
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 30E51B            JNB     ACC.5,?C0011
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 628
0018 906548            MOV     DPTR,#06548H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#rxData
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 630
0022 900000      R     MOV     DPTR,#rxStatus
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 33  

0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 541E              ANL     A,#01EH
002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C 6005              JZ      ?C0011
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 633
002E 900000      R     MOV     DPTR,#rxData
0031 E4                CLR     A
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
0033         ?C0011:
                                           ; SOURCE LINE # 638
0033 900000      R     MOV     DPTR,#rxData
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
                                           ; SOURCE LINE # 639
0038         ?C0013:
0038 22                RET     
             ; FUNCTION Pixy_UART_GetChar (END)

             ; FUNCTION Pixy_UART_GetByte (BEGIN)
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
0000 120000      R     LCALL   Pixy_UART_ReadRxStatus
0003 7E00              MOV     R6,#00H
0005 EF                MOV     A,R7
0006 7D00              MOV     R5,#00H
0008 FC                MOV     R4,A
0009 120000      R     LCALL   Pixy_UART_ReadRxData
000C 7E00              MOV     R6,#00H
000E EC                MOV     A,R4
000F 4E                ORL     A,R6
0010 FE                MOV     R6,A
0011 ED                MOV     A,R5
0012 4F                ORL     A,R7
0013 FF                MOV     R7,A
                                           ; SOURCE LINE # 662
0014         ?C0014:
0014 22                RET     
             ; FUNCTION Pixy_UART_GetByte (END)

             ; FUNCTION Pixy_UART_GetRxBufferSize (BEGIN)
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 733
0000 906568            MOV     DPTR,#06568H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5420              ANL     A,#020H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 6004              JZ      ?C0015
000F 7F01              MOV     R7,#01H
0011 8002              SJMP    ?C0016
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 34  

0013         ?C0015:
0013 7F00              MOV     R7,#00H
0015         ?C0016:
0015 900000      R     MOV     DPTR,#size
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 737
001A 900000      R     MOV     DPTR,#size
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
                                           ; SOURCE LINE # 738
001F         ?C0017:
001F 22                RET     
             ; FUNCTION Pixy_UART_GetRxBufferSize (END)

             ; FUNCTION Pixy_UART_ClearRxBuffer (BEGIN)
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 778
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 779
0008 906598            MOV     DPTR,#06598H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4401              ORL     A,#01H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 780
0013 906598            MOV     DPTR,#06598H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54FE              ANL     A,#0FEH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 782
001E 900000      R     MOV     DPTR,#enableInterrupts
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 802
0026 22                RET     
             ; FUNCTION Pixy_UART_ClearRxBuffer (END)

             ; FUNCTION _Pixy_UART_SetRxAddressMode (BEGIN)
                                           ; SOURCE LINE # 833
0000 900000      R     MOV     DPTR,#addressMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 852
0005 900000      R     MOV     DPTR,#addressMode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#addressMode
000D EF                MOV     A,R7
C51 COMPILER V9.03   PIXY_UART                                                             05/02/2016 22:50:15 PAGE 35  

000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
000F 22                RET     
             ; FUNCTION _Pixy_UART_SetRxAddressMode (END)

             ; FUNCTION _Pixy_UART_SetRxAddress1 (BEGIN)
                                           ; SOURCE LINE # 871
0000 900000      R     MOV     DPTR,#address
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 874
0005 900000      R     MOV     DPTR,#address
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906528            MOV     DPTR,#06528H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 875
000F 22                RET     
             ; FUNCTION _Pixy_UART_SetRxAddress1 (END)

             ; FUNCTION _Pixy_UART_SetRxAddress2 (BEGIN)
                                           ; SOURCE LINE # 892
0000 900000      R     MOV     DPTR,#address
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
0005 900000      R     MOV     DPTR,#address
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906538            MOV     DPTR,#06538H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 895
000F 22                RET     
             ; FUNCTION _Pixy_UART_SetRxAddress2 (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    406    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
