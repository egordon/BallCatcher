C51 COMPILER V9.03   FR_HBRIDGE_PM                                                         05/02/2016 22:49:01 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE FR_HBRIDGE_PM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\FR_HBridge_PM.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\FR_HBridge_PM.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\FR_HBridge_PM.lst) CD 
                    -DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\FR_HBridge_PM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: FR_HBridge_PM.c
   3          * Version 2.20
   4          *
   5          * Description:
   6          *  This file provides the power management source code to API for the
   7          *  PWM.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          #include "cytypes.h"
  18          #include "FR_HBridge.h"
  19          
  20          static FR_HBridge_backupStruct FR_HBridge_backup;
  21          
  22          
  23          /*******************************************************************************
  24          * Function Name: FR_HBridge_SaveConfig
  25          ********************************************************************************
  26          *
  27          * Summary:
  28          *  Saves the current user configuration of the component.
  29          *  
  30          * Parameters:  
  31          *  void
  32          *
  33          * Return: 
  34          *  void
  35          *
  36          * Global variables:
  37          *  FR_HBridge_backup:  Variables of this global structure are modified to 
  38          *  store the values of non retention configuration registers when Sleep() API is 
  39          *  called.
  40          *
  41          *******************************************************************************/
  42          void FR_HBridge_SaveConfig(void) 
  43          {
  44   1          
  45   1          #if(!FR_HBridge_UsingFixedFunction)
                      #if (CY_PSOC5A)
                          FR_HBridge_backup.PWMUdb = FR_HBridge_ReadCounter();
                          FR_HBridge_backup.PWMPeriod = FR_HBridge_ReadPeriod();
                          #if (FR_HBridge_UseStatus)
                              FR_HBridge_backup.InterruptMaskValue = FR_HBridge_STATUS_MASK;
                          #endif /* (FR_HBridge_UseStatus) */
                          
                          #if(FR_HBridge_UseOneCompareMode)
C51 COMPILER V9.03   FR_HBRIDGE_PM                                                         05/02/2016 22:49:01 PAGE 2   

                              FR_HBridge_backup.PWMCompareValue = FR_HBridge_ReadCompare();
                          #else
                              FR_HBridge_backup.PWMCompareValue1 = FR_HBridge_ReadCompare1();
                              FR_HBridge_backup.PWMCompareValue2 = FR_HBridge_ReadCompare2();
                          #endif /* (FR_HBridge_UseOneCompareMode) */
                          
                         #if(FR_HBridge_DeadBandUsed)
                              FR_HBridge_backup.PWMdeadBandValue = FR_HBridge_ReadDeadTime();
                          #endif /* (FR_HBridge_DeadBandUsed) */
                        
                          #if ( FR_HBridge_KillModeMinTime)
                              FR_HBridge_backup.PWMKillCounterPeriod = FR_HBridge_ReadKillTime();
                          #endif /* ( FR_HBridge_KillModeMinTime) */
                      #endif /* (CY_PSOC5A) */
                      
                      #if (CY_PSOC3 || CY_PSOC5LP)
                          #if(!FR_HBridge_PWMModeIsCenterAligned)
                              FR_HBridge_backup.PWMPeriod = FR_HBridge_ReadPeriod();
                          #endif /* (!FR_HBridge_PWMModeIsCenterAligned) */
                          FR_HBridge_backup.PWMUdb = FR_HBridge_ReadCounter();
                          #if (FR_HBridge_UseStatus)
                              FR_HBridge_backup.InterruptMaskValue = FR_HBridge_STATUS_MASK;
                          #endif /* (FR_HBridge_UseStatus) */
                          
                          #if(FR_HBridge_DeadBandMode == FR_HBridge__B_PWM__DBM_256_CLOCKS || \
                              FR_HBridge_DeadBandMode == FR_HBridge__B_PWM__DBM_2_4_CLOCKS)
                              FR_HBridge_backup.PWMdeadBandValue = FR_HBridge_ReadDeadTime();
                          #endif /*  deadband count is either 2-4 clocks or 256 clocks */
                          
                          #if(FR_HBridge_KillModeMinTime)
                               FR_HBridge_backup.PWMKillCounterPeriod = FR_HBridge_ReadKillTime();
                          #endif /* (FR_HBridge_KillModeMinTime) */
                      #endif /* (CY_PSOC3 || CY_PSOC5LP) */
                      
                      #if(FR_HBridge_UseControl)
                          FR_HBridge_backup.PWMControlRegister = FR_HBridge_ReadControlRegister();
                      #endif /* (FR_HBridge_UseControl) */
                  #endif  /* (!FR_HBridge_UsingFixedFunction) */
  92   1      }
  93          
  94          
  95          /*******************************************************************************
  96          * Function Name: FR_HBridge_RestoreConfig
  97          ********************************************************************************
  98          * 
  99          * Summary:
 100          *  Restores the current user configuration of the component.
 101          *
 102          * Parameters:  
 103          *  void
 104          *
 105          * Return: 
 106          *  void
 107          *
 108          * Global variables:
 109          *  FR_HBridge_backup:  Variables of this global structure are used to  
 110          *  restore the values of non retention registers on wakeup from sleep mode.
 111          *
 112          *******************************************************************************/
 113          void FR_HBridge_RestoreConfig(void) 
 114          {
 115   1              #if(!FR_HBridge_UsingFixedFunction)
C51 COMPILER V9.03   FR_HBRIDGE_PM                                                         05/02/2016 22:49:01 PAGE 3   

                          #if (CY_PSOC5A)
                              /* Interrupt State Backup for Critical Region*/
                              uint8 FR_HBridge_interruptState;
                              /* Enter Critical Region*/
                              FR_HBridge_interruptState = CyEnterCriticalSection();
                              #if (FR_HBridge_UseStatus)
                                  /* Use the interrupt output of the status register for IRQ output */
                                  FR_HBridge_STATUS_AUX_CTRL |= FR_HBridge_STATUS_ACTL_INT_EN_MASK;
                                  
                                  FR_HBridge_STATUS_MASK = FR_HBridge_backup.InterruptMaskValue;
                              #endif /* (FR_HBridge_UseStatus) */
                              
                              #if (FR_HBridge_Resolution == 8)
                                  /* Set FIFO 0 to 1 byte register for period*/
                                  FR_HBridge_AUX_CONTROLDP0 |= (FR_HBridge_AUX_CTRL_FIFO0_CLR);
                              #else /* (FR_HBridge_Resolution == 16)*/
                                  /* Set FIFO 0 to 1 byte register for period */
                                  FR_HBridge_AUX_CONTROLDP0 |= (FR_HBridge_AUX_CTRL_FIFO0_CLR);
                                  FR_HBridge_AUX_CONTROLDP1 |= (FR_HBridge_AUX_CTRL_FIFO0_CLR);
                              #endif /* (FR_HBridge_Resolution == 8) */
                              /* Exit Critical Region*/
                              CyExitCriticalSection(FR_HBridge_interruptState);
                              
                              FR_HBridge_WriteCounter(FR_HBridge_backup.PWMUdb);
                              FR_HBridge_WritePeriod(FR_HBridge_backup.PWMPeriod);
                              
                              #if(FR_HBridge_UseOneCompareMode)
                                  FR_HBridge_WriteCompare(FR_HBridge_backup.PWMCompareValue);
                              #else
                                  FR_HBridge_WriteCompare1(FR_HBridge_backup.PWMCompareValue1);
                                  FR_HBridge_WriteCompare2(FR_HBridge_backup.PWMCompareValue2);
                              #endif /* (FR_HBridge_UseOneCompareMode) */
                              
                             #if(FR_HBridge_DeadBandMode == FR_HBridge__B_PWM__DBM_256_CLOCKS || \
                                 FR_HBridge_DeadBandMode == FR_HBridge__B_PWM__DBM_2_4_CLOCKS)
                                  FR_HBridge_WriteDeadTime(FR_HBridge_backup.PWMdeadBandValue);
                              #endif /* deadband count is either 2-4 clocks or 256 clocks */
                          
                              #if ( FR_HBridge_KillModeMinTime)
                                  FR_HBridge_WriteKillTime(FR_HBridge_backup.PWMKillCounterPeriod);
                              #endif /* ( FR_HBridge_KillModeMinTime) */
                          #endif /* (CY_PSOC5A) */
                          
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              #if(!FR_HBridge_PWMModeIsCenterAligned)
                                  FR_HBridge_WritePeriod(FR_HBridge_backup.PWMPeriod);
                              #endif /* (!FR_HBridge_PWMModeIsCenterAligned) */
                              FR_HBridge_WriteCounter(FR_HBridge_backup.PWMUdb);
                              #if (FR_HBridge_UseStatus)
                                  FR_HBridge_STATUS_MASK = FR_HBridge_backup.InterruptMaskValue;
                              #endif /* (FR_HBridge_UseStatus) */
                              
                              #if(FR_HBridge_DeadBandMode == FR_HBridge__B_PWM__DBM_256_CLOCKS || \
                                  FR_HBridge_DeadBandMode == FR_HBridge__B_PWM__DBM_2_4_CLOCKS)
                                  FR_HBridge_WriteDeadTime(FR_HBridge_backup.PWMdeadBandValue);
                              #endif /* deadband count is either 2-4 clocks or 256 clocks */
                              
                              #if(FR_HBridge_KillModeMinTime)
                                  FR_HBridge_WriteKillTime(FR_HBridge_backup.PWMKillCounterPeriod);
                              #endif /* (FR_HBridge_KillModeMinTime) */
                          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
                          
C51 COMPILER V9.03   FR_HBRIDGE_PM                                                         05/02/2016 22:49:01 PAGE 4   

                          #if(FR_HBridge_UseControl)
                              FR_HBridge_WriteControlRegister(FR_HBridge_backup.PWMControlRegister); 
                          #endif /* (FR_HBridge_UseControl) */
                      #endif  /* (!FR_HBridge_UsingFixedFunction) */
 182   1          }
 183          
 184          
 185          /*******************************************************************************
 186          * Function Name: FR_HBridge_Sleep
 187          ********************************************************************************
 188          * 
 189          * Summary:
 190          *  Disables block's operation and saves the user configuration. Should be called 
 191          *  just prior to entering sleep.
 192          *  
 193          * Parameters:  
 194          *  void
 195          *
 196          * Return: 
 197          *  void
 198          *
 199          * Global variables:
 200          *  FR_HBridge_backup.PWMEnableState:  Is modified depending on the enable 
 201          *  state of the block before entering sleep mode.
 202          *
 203          *******************************************************************************/
 204          void FR_HBridge_Sleep(void) 
 205          {
 206   1          #if(FR_HBridge_UseControl)
 207   1              if(FR_HBridge_CTRL_ENABLE == (FR_HBridge_CONTROL & FR_HBridge_CTRL_ENABLE))
 208   1              {
 209   2                  /*Component is enabled */
 210   2                  FR_HBridge_backup.PWMEnableState = 1u;
 211   2              }
 212   1              else
 213   1              {
 214   2                  /* Component is disabled */
 215   2                  FR_HBridge_backup.PWMEnableState = 0u;
 216   2              }
 217   1          #endif /* (FR_HBridge_UseControl) */
 218   1          /* Stop component */
 219   1          FR_HBridge_Stop();
 220   1          
 221   1          /* Save registers configuration */
 222   1          FR_HBridge_SaveConfig();
 223   1      }
 224          
 225          
 226          /*******************************************************************************
 227          * Function Name: FR_HBridge_Wakeup
 228          ********************************************************************************
 229          * 
 230          * Summary:
 231          *  Restores and enables the user configuration. Should be called just after 
 232          *  awaking from sleep.
 233          *  
 234          * Parameters:  
 235          *  void
 236          *
 237          * Return: 
 238          *  void
 239          *
C51 COMPILER V9.03   FR_HBRIDGE_PM                                                         05/02/2016 22:49:01 PAGE 5   

 240          * Global variables:
 241          *  FR_HBridge_backup.pwmEnable:  Is used to restore the enable state of 
 242          *  block on wakeup from sleep mode.
 243          *
 244          *******************************************************************************/
 245          void FR_HBridge_Wakeup(void) 
 246          {
 247   1           /* Restore registers values */
 248   1          FR_HBridge_RestoreConfig();
 249   1          
 250   1          if(FR_HBridge_backup.PWMEnableState != 0u)
 251   1          {
 252   2              /* Enable component's operation */
 253   2              FR_HBridge_Enable();
 254   2          } /* Do nothing if component's block was disabled before */
 255   1          
 256   1      }
 257          
 258          
 259          /* [] END OF FILE */
C51 COMPILER V9.03   FR_HBRIDGE_PM                                                         05/02/2016 22:49:01 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION FR_HBridge_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 92
0000 22                RET     
             ; FUNCTION FR_HBridge_SaveConfig (END)

             ; FUNCTION FR_HBridge_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 182
0000 22                RET     
             ; FUNCTION FR_HBridge_RestoreConfig (END)

             ; FUNCTION FR_HBridge_Sleep (BEGIN)
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 207
0000 904F24            MOV     DPTR,#04F24H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 6401              XRL     A,#01H
000E 4E                ORL     A,R6
000F 7008              JNZ     ?C0003
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 210
0011 900000      R     MOV     DPTR,#FR_HBridge_backup
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
0017 8005              SJMP    ?C0004
0019         ?C0003:
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 215
0019 900000      R     MOV     DPTR,#FR_HBridge_backup
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
001E         ?C0004:
                                           ; SOURCE LINE # 219
001E 120000      E     LCALL   FR_HBridge_Stop
                                           ; SOURCE LINE # 222
0021 120000      R     LCALL   FR_HBridge_SaveConfig
                                           ; SOURCE LINE # 223
0024 22                RET     
             ; FUNCTION FR_HBridge_Sleep (END)

             ; FUNCTION FR_HBridge_Wakeup (BEGIN)
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 248
0000 120000      R     LCALL   FR_HBridge_RestoreConfig
                                           ; SOURCE LINE # 250
0003 900000      R     MOV     DPTR,#FR_HBridge_backup
C51 COMPILER V9.03   FR_HBRIDGE_PM                                                         05/02/2016 22:49:01 PAGE 7   

0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 6003              JZ      ?C0007
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 253
000B 120000      E     LCALL   FR_HBridge_Enable
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 256
000E         ?C0007:
000E 22                RET     
             ; FUNCTION FR_HBridge_Wakeup (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     54    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
